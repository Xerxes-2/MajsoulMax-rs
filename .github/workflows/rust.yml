name: Rust

on:
  push:
    tags:
      # Regex for a version number such as 0.2.1
      - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: android-arm64
            os: ubuntu-latest
            target: aarch64-linux-android

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos-aarch64
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
  
      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.target }}

      - name: Install protoc
        uses: Noelware/setup-protoc@1.2.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup protoc Unix
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: |
          chmod 755 $(which protoc)
          echo "PROTOC=$(which protoc)" >> $GITHUB_ENV
    
      - name: Setup protoc Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "PROTOC=$((Get-Command protoc).Path)" >> $env:GITHUB_ENV
            
      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Prepare Android NDK
        if: ${{ matrix.target  == 'aarch64-linux-android' }}
        run: |
          sudo apt-get update
          wget https://dl.google.com/android/repository/android-ndk-r27-linux.zip -O android-ndk.zip
          unzip android-ndk.zip
          export ANDROID_NDK_HOME=$PWD/android-ndk-r27
          export ANDROID_NDK_ROOT=$PWD/android-ndk-r27
          export ANDROID_NDK=$PWD/android-ndk-r27
          export BINDGEN_EXTRA_CLANG_ARGS="--sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export PATH=$ANDROID_NDK_HOME:$PATH
          rustup target add aarch64-linux-android
          cargo install cargo-ndk

      - name: Build
        if: ${{ matrix.target  != 'aarch64-linux-android' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build Android
        if: ${{ matrix.target  == 'aarch64-linux-android' }}
        run: cargo ndk -t arm64-v8a build --verbose --release

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="majsoul_max_rs"
      
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi
          cp -r "liqi_config" "$dirname"
      
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload the binaries
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ASSET }}
