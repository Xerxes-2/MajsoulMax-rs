// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyCaptcha {
    #[prost(uint32, tag = "1")]
    pub check_id: u32,
    #[prost(uint32, tag = "2")]
    pub start_time: u32,
    #[prost(string, tag = "3")]
    pub random_str: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyRoomGameStart {
    #[prost(string, tag = "1")]
    pub game_url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub connect_token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub location: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyMatchGameStart {
    #[prost(string, tag = "1")]
    pub game_url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub connect_token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub match_mode_id: u32,
    #[prost(string, tag = "5")]
    pub location: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyRoomPlayerReady {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(bool, tag = "2")]
    pub ready: bool,
    #[prost(message, optional, tag = "3")]
    pub account_list: ::core::option::Option<notify_room_player_ready::AccountReadyState>,
    #[prost(uint32, tag = "4")]
    pub seq: u32,
}
/// Nested message and enum types in `NotifyRoomPlayerReady`.
pub mod notify_room_player_ready {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AccountReadyState {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(bool, tag = "2")]
        pub ready: bool,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyRoomPlayerDressing {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(bool, tag = "2")]
    pub dressing: bool,
    #[prost(message, optional, tag = "3")]
    pub account_list: ::core::option::Option<notify_room_player_dressing::AccountDressingState>,
    #[prost(uint32, tag = "4")]
    pub seq: u32,
}
/// Nested message and enum types in `NotifyRoomPlayerDressing`.
pub mod notify_room_player_dressing {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AccountDressingState {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(bool, tag = "2")]
        pub dressing: bool,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyRoomPlayerUpdate {
    #[prost(message, repeated, tag = "1")]
    pub update_list: ::prost::alloc::vec::Vec<PlayerBaseView>,
    #[prost(uint32, repeated, tag = "2")]
    pub remove_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub owner_id: u32,
    #[prost(uint32, tag = "4")]
    pub robot_count: u32,
    #[prost(message, repeated, tag = "5")]
    pub player_list: ::prost::alloc::vec::Vec<PlayerBaseView>,
    #[prost(uint32, tag = "6")]
    pub seq: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyRoomKickOut {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyFriendStateChange {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(message, optional, tag = "2")]
    pub active_state: ::core::option::Option<AccountActiveState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyFriendViewChange {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(message, optional, tag = "2")]
    pub base: ::core::option::Option<PlayerBaseView>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyFriendChange {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(message, optional, tag = "3")]
    pub friend: ::core::option::Option<Friend>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyNewFriendApply {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(uint32, tag = "2")]
    pub apply_time: u32,
    #[prost(uint32, tag = "3")]
    pub removed_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyClientMessage {
    #[prost(message, optional, tag = "1")]
    pub sender: ::core::option::Option<PlayerBaseView>,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyAccountUpdate {
    #[prost(message, optional, tag = "1")]
    pub update: ::core::option::Option<AccountUpdate>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyAnotherLogin {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyAccountLogout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyAnnouncementUpdate {
    #[prost(message, repeated, tag = "1")]
    pub update_list: ::prost::alloc::vec::Vec<notify_announcement_update::AnnouncementUpdate>,
}
/// Nested message and enum types in `NotifyAnnouncementUpdate`.
pub mod notify_announcement_update {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AnnouncementUpdate {
        #[prost(string, tag = "1")]
        pub lang: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub platform: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyNewMail {
    #[prost(message, optional, tag = "1")]
    pub mail: ::core::option::Option<Mail>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyDeleteMail {
    #[prost(uint32, repeated, tag = "1")]
    pub mail_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyReviveCoinUpdate {
    #[prost(bool, tag = "1")]
    pub has_gained: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyDailyTaskUpdate {
    #[prost(message, repeated, tag = "1")]
    pub progresses: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(uint32, tag = "2")]
    pub max_daily_task_count: u32,
    #[prost(uint32, tag = "3")]
    pub refresh_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityTaskUpdate {
    #[prost(message, repeated, tag = "1")]
    pub progresses: ::prost::alloc::vec::Vec<TaskProgress>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityPeriodTaskUpdate {
    #[prost(message, repeated, tag = "1")]
    pub progresses: ::prost::alloc::vec::Vec<TaskProgress>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyAccountRandomTaskUpdate {
    #[prost(message, repeated, tag = "1")]
    pub progresses: ::prost::alloc::vec::Vec<TaskProgress>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivitySegmentTaskUpdate {
    #[prost(message, repeated, tag = "1")]
    pub progresses: ::prost::alloc::vec::Vec<SegmentTaskProgress>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityUpdate {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<notify_activity_update::FeedActivityData>,
}
/// Nested message and enum types in `NotifyActivityUpdate`.
pub mod notify_activity_update {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FeedActivityData {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(uint32, tag = "2")]
        pub feed_count: u32,
        #[prost(message, optional, tag = "3")]
        pub friend_receive_data: ::core::option::Option<feed_activity_data::CountWithTimeData>,
        #[prost(message, optional, tag = "4")]
        pub friend_send_data: ::core::option::Option<feed_activity_data::CountWithTimeData>,
        #[prost(message, repeated, tag = "5")]
        pub gift_inbox: ::prost::alloc::vec::Vec<feed_activity_data::GiftBoxData>,
    }
    /// Nested message and enum types in `FeedActivityData`.
    pub mod feed_activity_data {
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct CountWithTimeData {
            #[prost(uint32, tag = "1")]
            pub count: u32,
            #[prost(uint32, tag = "2")]
            pub last_update_time: u32,
        }
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct GiftBoxData {
            #[prost(uint32, tag = "1")]
            pub id: u32,
            #[prost(uint32, tag = "2")]
            pub item_id: u32,
            #[prost(uint32, tag = "3")]
            pub count: u32,
            #[prost(uint32, tag = "4")]
            pub from_account_id: u32,
            #[prost(uint32, tag = "5")]
            pub time: u32,
            #[prost(uint32, tag = "6")]
            pub received: u32,
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyAccountChallengeTaskUpdate {
    #[prost(message, repeated, tag = "1")]
    pub progresses: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub refresh_count: u32,
    #[prost(uint32, tag = "4")]
    pub match_count: u32,
    #[prost(uint32, tag = "5")]
    pub ticket_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub rewarded_season: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyNewComment {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyRollingNotice {
    #[prost(message, repeated, tag = "1")]
    pub notice: ::prost::alloc::vec::Vec<RollingNotice>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyGiftSendRefresh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyShopUpdate {
    #[prost(message, optional, tag = "1")]
    pub shop_info: ::core::option::Option<ShopInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyIntervalUpdate {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyVipLevelChange {
    #[prost(uint32, tag = "1")]
    pub gift_limit: u32,
    #[prost(uint32, tag = "2")]
    pub friend_max_count: u32,
    #[prost(uint32, tag = "3")]
    pub zhp_free_refresh_limit: u32,
    #[prost(uint32, tag = "4")]
    pub zhp_cost_refresh_limit: u32,
    #[prost(float, tag = "5")]
    pub buddy_bonus: f32,
    #[prost(uint32, tag = "6")]
    pub record_collect_limit: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyServerSetting {
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<ServerSettings>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyPayResult {
    #[prost(uint32, tag = "1")]
    pub pay_result: u32,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub goods_id: u32,
    #[prost(uint32, tag = "4")]
    pub new_month_ticket: u32,
    #[prost(message, repeated, tag = "5")]
    pub resource_modify: ::prost::alloc::vec::Vec<notify_pay_result::ResourceModify>,
}
/// Nested message and enum types in `NotifyPayResult`.
pub mod notify_pay_result {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ResourceModify {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
        #[prost(uint32, tag = "3")]
        pub r#final: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyCustomContestAccountMsg {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
    #[prost(string, tag = "3")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub verified: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyCustomContestSystemMsg {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, tag = "3")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub game_start: ::core::option::Option<CustomizedContestGameStart>,
    #[prost(message, optional, tag = "5")]
    pub game_end: ::core::option::Option<CustomizedContestGameEnd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyMatchTimeout {
    #[prost(string, tag = "1")]
    pub sid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyMatchFailed {
    #[prost(string, tag = "1")]
    pub sid: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyCustomContestState {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityChange {
    #[prost(message, repeated, tag = "1")]
    pub new_activities: ::prost::alloc::vec::Vec<Activity>,
    #[prost(uint32, repeated, tag = "2")]
    pub end_activities: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyAfkResult {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, tag = "2")]
    pub ban_end_time: u32,
    #[prost(string, tag = "3")]
    pub game_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyLoginQueueFinished {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyGameFinishRewardV2 {
    #[prost(uint32, tag = "1")]
    pub mode_id: u32,
    #[prost(message, optional, tag = "2")]
    pub level_change: ::core::option::Option<notify_game_finish_reward_v2::LevelChange>,
    #[prost(message, optional, tag = "3")]
    pub match_chest: ::core::option::Option<notify_game_finish_reward_v2::MatchChest>,
    #[prost(message, optional, tag = "4")]
    pub main_character: ::core::option::Option<notify_game_finish_reward_v2::MainCharacter>,
    #[prost(message, optional, tag = "5")]
    pub character_gift: ::core::option::Option<notify_game_finish_reward_v2::CharacterGift>,
}
/// Nested message and enum types in `NotifyGameFinishRewardV2`.
pub mod notify_game_finish_reward_v2 {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LevelChange {
        #[prost(message, optional, tag = "1")]
        pub origin: ::core::option::Option<super::AccountLevel>,
        #[prost(message, optional, tag = "2")]
        pub r#final: ::core::option::Option<super::AccountLevel>,
        #[prost(uint32, tag = "3")]
        pub r#type: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MatchChest {
        #[prost(uint32, tag = "1")]
        pub chest_id: u32,
        #[prost(uint32, tag = "2")]
        pub origin: u32,
        #[prost(uint32, tag = "3")]
        pub r#final: u32,
        #[prost(bool, tag = "4")]
        pub is_graded: bool,
        #[prost(message, repeated, tag = "5")]
        pub rewards: ::prost::alloc::vec::Vec<super::RewardSlot>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MainCharacter {
        #[prost(uint32, tag = "1")]
        pub level: u32,
        #[prost(uint32, tag = "2")]
        pub exp: u32,
        #[prost(uint32, tag = "3")]
        pub add: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CharacterGift {
        #[prost(uint32, tag = "1")]
        pub origin: u32,
        #[prost(uint32, tag = "2")]
        pub r#final: u32,
        #[prost(uint32, tag = "3")]
        pub add: u32,
        #[prost(bool, tag = "4")]
        pub is_graded: bool,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityRewardV2 {
    #[prost(message, repeated, tag = "1")]
    pub activity_reward: ::prost::alloc::vec::Vec<notify_activity_reward_v2::ActivityReward>,
}
/// Nested message and enum types in `NotifyActivityRewardV2`.
pub mod notify_activity_reward_v2 {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ActivityReward {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(message, repeated, tag = "2")]
        pub rewards: ::prost::alloc::vec::Vec<super::RewardSlot>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityPointV2 {
    #[prost(message, repeated, tag = "1")]
    pub activity_points: ::prost::alloc::vec::Vec<notify_activity_point_v2::ActivityPoint>,
}
/// Nested message and enum types in `NotifyActivityPointV2`.
pub mod notify_activity_point_v2 {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ActivityPoint {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(uint32, tag = "2")]
        pub point: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyLeaderboardPointV2 {
    #[prost(message, repeated, tag = "1")]
    pub leaderboard_points: ::prost::alloc::vec::Vec<notify_leaderboard_point_v2::LeaderboardPoint>,
}
/// Nested message and enum types in `NotifyLeaderboardPointV2`.
pub mod notify_leaderboard_point_v2 {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LeaderboardPoint {
        #[prost(uint32, tag = "1")]
        pub leaderboard_id: u32,
        #[prost(uint32, tag = "2")]
        pub point: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub u32_params: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, repeated, tag = "3")]
    pub str_params: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub json_param: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Wrapper {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkEndpoint {
    #[prost(string, tag = "1")]
    pub family: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub port: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCommon {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCommon {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountUpdate {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub update: ::core::option::Option<AccountUpdate>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AntiAddiction {
    #[prost(uint32, tag = "1")]
    pub online_duration: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountMahjongStatistic {
    #[prost(uint32, repeated, tag = "1")]
    pub final_position_counts: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub recent_round: ::core::option::Option<account_mahjong_statistic::RoundSummary>,
    #[prost(message, optional, tag = "3")]
    pub recent_hu: ::core::option::Option<account_mahjong_statistic::HuSummary>,
    #[prost(message, optional, tag = "4")]
    pub highest_hu: ::core::option::Option<account_mahjong_statistic::HighestHuRecord>,
    #[prost(message, optional, tag = "6")]
    pub recent_20_hu_summary: ::core::option::Option<account_mahjong_statistic::Liqi20Summary>,
    #[prost(message, optional, tag = "7")]
    pub recent_10_hu_summary: ::core::option::Option<account_mahjong_statistic::LiQi10Summary>,
    #[prost(message, repeated, tag = "8")]
    pub recent_10_game_result: ::prost::alloc::vec::Vec<account_mahjong_statistic::GameResult>,
}
/// Nested message and enum types in `AccountMahjongStatistic`.
pub mod account_mahjong_statistic {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RoundSummary {
        #[prost(uint32, tag = "1")]
        pub total_count: u32,
        #[prost(uint32, tag = "2")]
        pub rong_count: u32,
        #[prost(uint32, tag = "3")]
        pub zimo_count: u32,
        #[prost(uint32, tag = "4")]
        pub fangchong_count: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct HuSummary {
        #[prost(uint32, tag = "1")]
        pub total_count: u32,
        #[prost(uint32, tag = "2")]
        pub dora_round_count: u32,
        #[prost(uint32, tag = "3")]
        pub total_fan: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct HighestHuRecord {
        #[prost(uint32, tag = "1")]
        pub fanshu: u32,
        #[prost(uint32, tag = "2")]
        pub doranum: u32,
        #[prost(string, tag = "3")]
        pub title: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "4")]
        pub hands: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, repeated, tag = "5")]
        pub ming: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, tag = "6")]
        pub hupai: ::prost::alloc::string::String,
        #[prost(uint32, tag = "7")]
        pub title_id: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Liqi20Summary {
        #[prost(uint32, tag = "1")]
        pub total_count: u32,
        #[prost(uint32, tag = "2")]
        pub total_lidora_count: u32,
        #[prost(uint32, tag = "3")]
        pub average_hu_point: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LiQi10Summary {
        #[prost(uint32, tag = "1")]
        pub total_xuanshang: u32,
        #[prost(uint32, tag = "2")]
        pub total_fanshu: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GameResult {
        #[prost(uint32, tag = "1")]
        pub rank: u32,
        #[prost(int32, tag = "2")]
        pub final_point: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountStatisticData {
    #[prost(uint32, tag = "1")]
    pub mahjong_category: u32,
    #[prost(uint32, tag = "2")]
    pub game_category: u32,
    #[prost(message, optional, tag = "3")]
    pub statistic: ::core::option::Option<AccountMahjongStatistic>,
    #[prost(uint32, tag = "4")]
    pub game_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccountLevel {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub score: u32,
}
#[derive(::serde::Serialize, ::serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct ViewSlot {
    #[prost(uint32, tag = "1")]
    pub slot: u32,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
    #[prost(uint32, tag = "3")]
    pub r#type: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub item_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Account {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(string, tag = "2")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub login_time: u32,
    #[prost(uint32, tag = "4")]
    pub logout_time: u32,
    #[prost(uint32, tag = "5")]
    pub room_id: u32,
    #[prost(message, optional, tag = "6")]
    pub anti_addiction: ::core::option::Option<AntiAddiction>,
    #[prost(uint32, tag = "7")]
    pub title: u32,
    #[prost(string, tag = "8")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub email: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub email_verify: u32,
    #[prost(uint32, tag = "11")]
    pub gold: u32,
    #[prost(uint32, tag = "12")]
    pub diamond: u32,
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub vip: u32,
    #[prost(int32, tag = "15")]
    pub birthday: i32,
    #[prost(string, tag = "16")]
    pub phone: ::prost::alloc::string::String,
    #[prost(uint32, tag = "17")]
    pub phone_verify: u32,
    #[prost(message, repeated, tag = "18")]
    pub platform_diamond: ::prost::alloc::vec::Vec<account::PlatformDiamond>,
    #[prost(message, optional, tag = "21")]
    pub level: ::core::option::Option<AccountLevel>,
    #[prost(message, optional, tag = "22")]
    pub level3: ::core::option::Option<AccountLevel>,
    #[prost(uint32, tag = "23")]
    pub avatar_frame: u32,
    #[prost(uint32, tag = "24")]
    pub skin_ticket: u32,
    #[prost(message, repeated, tag = "25")]
    pub platform_skin_ticket: ::prost::alloc::vec::Vec<account::PlatformSkinTicket>,
    #[prost(uint32, tag = "26")]
    pub verified: u32,
    #[prost(message, repeated, tag = "27")]
    pub challenge_levels: ::prost::alloc::vec::Vec<account::ChallengeLevel>,
    #[prost(message, repeated, tag = "28")]
    pub achievement_count: ::prost::alloc::vec::Vec<account::AchievementCount>,
    #[prost(uint32, tag = "29")]
    pub frozen_state: u32,
    #[prost(uint32, repeated, tag = "30")]
    pub loading_image: ::prost::alloc::vec::Vec<u32>,
}
/// Nested message and enum types in `Account`.
pub mod account {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PlatformDiamond {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PlatformSkinTicket {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ChallengeLevel {
        #[prost(uint32, tag = "1")]
        pub season: u32,
        #[prost(uint32, tag = "2")]
        pub level: u32,
        #[prost(uint32, tag = "3")]
        pub rank: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AchievementCount {
        #[prost(uint32, tag = "1")]
        pub rare: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountOwnerData {
    #[prost(uint32, repeated, tag = "1")]
    pub unlock_characters: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountUpdate {
    #[prost(message, repeated, tag = "1")]
    pub numerical: ::prost::alloc::vec::Vec<account_update::NumericalUpdate>,
    #[prost(message, optional, tag = "2")]
    pub character: ::core::option::Option<account_update::CharacterUpdate>,
    #[prost(message, optional, tag = "3")]
    pub bag: ::core::option::Option<BagUpdate>,
    #[prost(message, optional, tag = "4")]
    pub achievement: ::core::option::Option<account_update::AchievementUpdate>,
    #[prost(message, optional, tag = "5")]
    pub shilian: ::core::option::Option<AccountShiLian>,
    #[prost(message, optional, tag = "6")]
    pub daily_task: ::core::option::Option<account_update::DailyTaskUpdate>,
    #[prost(message, optional, tag = "7")]
    pub title: ::core::option::Option<account_update::TitleUpdate>,
    #[prost(uint32, repeated, tag = "8")]
    pub new_recharged_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub activity_task: ::core::option::Option<account_update::TaskUpdate>,
    #[prost(message, optional, tag = "10")]
    pub activity_flip_task: ::core::option::Option<account_update::TaskUpdate>,
    #[prost(message, optional, tag = "11")]
    pub activity_period_task: ::core::option::Option<account_update::TaskUpdate>,
    #[prost(message, optional, tag = "12")]
    pub activity_random_task: ::core::option::Option<account_update::TaskUpdate>,
    #[prost(message, optional, tag = "13")]
    pub challenge: ::core::option::Option<account_update::AccountChallengeUpdate>,
    #[prost(message, optional, tag = "14")]
    pub ab_match: ::core::option::Option<account_update::AccountAbMatchUpdate>,
    #[prost(message, optional, tag = "15")]
    pub activity: ::core::option::Option<AccountActivityUpdate>,
    #[prost(message, optional, tag = "16")]
    pub activity_segment_task: ::core::option::Option<account_update::SegmentTaskUpdate>,
    #[prost(message, optional, tag = "17")]
    pub month_ticket: ::core::option::Option<account_update::MonthTicketUpdate>,
}
/// Nested message and enum types in `AccountUpdate`.
pub mod account_update {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct NumericalUpdate {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "3")]
        pub r#final: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CharacterUpdate {
        #[prost(message, repeated, tag = "2")]
        pub characters: ::prost::alloc::vec::Vec<super::Character>,
        #[prost(uint32, repeated, tag = "3")]
        pub skins: ::prost::alloc::vec::Vec<u32>,
        #[prost(uint32, repeated, tag = "4")]
        pub finished_endings: ::prost::alloc::vec::Vec<u32>,
        #[prost(uint32, repeated, tag = "5")]
        pub rewarded_endings: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AchievementUpdate {
        #[prost(message, repeated, tag = "1")]
        pub progresses: ::prost::alloc::vec::Vec<super::AchievementProgress>,
        #[prost(uint32, repeated, tag = "2")]
        pub rewarded_group: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DailyTaskUpdate {
        #[prost(message, repeated, tag = "1")]
        pub progresses: ::prost::alloc::vec::Vec<super::TaskProgress>,
        #[prost(uint32, repeated, tag = "2")]
        pub task_list: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TitleUpdate {
        #[prost(uint32, repeated, tag = "1")]
        pub new_titles: ::prost::alloc::vec::Vec<u32>,
        #[prost(uint32, repeated, tag = "2")]
        pub remove_titles: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TaskUpdate {
        #[prost(message, repeated, tag = "1")]
        pub progresses: ::prost::alloc::vec::Vec<super::TaskProgress>,
        #[prost(uint32, repeated, tag = "2")]
        pub task_list: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountChallengeUpdate {
        #[prost(message, repeated, tag = "1")]
        pub progresses: ::prost::alloc::vec::Vec<super::TaskProgress>,
        #[prost(uint32, tag = "2")]
        pub level: u32,
        #[prost(uint32, tag = "3")]
        pub refresh_count: u32,
        #[prost(uint32, tag = "4")]
        pub match_count: u32,
        #[prost(uint32, tag = "5")]
        pub ticket_id: u32,
        #[prost(uint32, repeated, tag = "6")]
        pub task_list: ::prost::alloc::vec::Vec<u32>,
        #[prost(uint32, repeated, tag = "7")]
        pub rewarded_season: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountAbMatchUpdate {
        #[prost(uint32, tag = "1")]
        pub match_id: u32,
        #[prost(uint32, tag = "2")]
        pub match_count: u32,
        #[prost(uint32, tag = "3")]
        pub buy_in_count: u32,
        #[prost(uint32, tag = "4")]
        pub point: u32,
        #[prost(bool, tag = "5")]
        pub rewarded: bool,
        #[prost(message, repeated, tag = "6")]
        pub match_max_point: ::prost::alloc::vec::Vec<account_ab_match_update::MatchPoint>,
        #[prost(bool, tag = "7")]
        pub quit: bool,
    }
    /// Nested message and enum types in `AccountABMatchUpdate`.
    pub mod account_ab_match_update {
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct MatchPoint {
            #[prost(uint32, tag = "1")]
            pub match_id: u32,
            #[prost(uint32, tag = "2")]
            pub point: u32,
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SegmentTaskUpdate {
        #[prost(message, repeated, tag = "1")]
        pub progresses: ::prost::alloc::vec::Vec<super::SegmentTaskProgress>,
        #[prost(uint32, repeated, tag = "2")]
        pub task_list: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MonthTicketUpdate {
        #[prost(uint32, tag = "1")]
        pub end_time: u32,
        #[prost(uint32, tag = "2")]
        pub last_pay_time: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameMetaData {
    #[prost(uint32, tag = "1")]
    pub room_id: u32,
    #[prost(uint32, tag = "2")]
    pub mode_id: u32,
    #[prost(uint32, tag = "3")]
    pub contest_uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountPlayingGame {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub category: u32,
    #[prost(message, optional, tag = "3")]
    pub meta: ::core::option::Option<GameMetaData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountCacheView {
    #[prost(uint32, tag = "1")]
    pub cache_version: u32,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub login_time: u32,
    #[prost(uint32, tag = "5")]
    pub logout_time: u32,
    #[prost(bool, tag = "6")]
    pub is_online: bool,
    #[prost(uint32, tag = "7")]
    pub room_id: u32,
    #[prost(uint32, tag = "8")]
    pub title: u32,
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub vip: u32,
    #[prost(message, optional, tag = "11")]
    pub level: ::core::option::Option<AccountLevel>,
    #[prost(message, optional, tag = "12")]
    pub playing_game: ::core::option::Option<AccountPlayingGame>,
    #[prost(message, optional, tag = "13")]
    pub level3: ::core::option::Option<AccountLevel>,
    #[prost(uint32, tag = "14")]
    pub avatar_frame: u32,
    #[prost(uint32, tag = "15")]
    pub verified: u32,
    #[prost(uint32, tag = "16")]
    pub ban_deadline: u32,
    #[prost(uint32, tag = "17")]
    pub comment_ban: u32,
    #[prost(uint32, tag = "18")]
    pub ban_state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerBaseView {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "3")]
    pub title: u32,
    #[prost(string, tag = "4")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub level: ::core::option::Option<AccountLevel>,
    #[prost(message, optional, tag = "6")]
    pub level3: ::core::option::Option<AccountLevel>,
    #[prost(uint32, tag = "7")]
    pub avatar_frame: u32,
    #[prost(uint32, tag = "8")]
    pub verified: u32,
    #[prost(uint32, tag = "9")]
    pub is_banned: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGameView {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "3")]
    pub title: u32,
    #[prost(string, tag = "4")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub level: ::core::option::Option<AccountLevel>,
    #[prost(message, optional, tag = "6")]
    pub character: ::core::option::Option<Character>,
    #[prost(message, optional, tag = "7")]
    pub level3: ::core::option::Option<AccountLevel>,
    #[prost(uint32, tag = "8")]
    pub avatar_frame: u32,
    #[prost(uint32, tag = "9")]
    pub verified: u32,
    #[prost(message, repeated, tag = "10")]
    pub views: ::prost::alloc::vec::Vec<ViewSlot>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameSetting {
    #[prost(uint32, tag = "1")]
    pub emoji_switch: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameMode {
    #[prost(uint32, tag = "1")]
    pub mode: u32,
    #[prost(bool, tag = "4")]
    pub ai: bool,
    #[prost(string, tag = "5")]
    pub extendinfo: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub detail_rule: ::core::option::Option<GameDetailRule>,
    #[prost(message, optional, tag = "7")]
    pub testing_environment: ::core::option::Option<GameTestingEnvironmentSet>,
    #[prost(message, optional, tag = "8")]
    pub game_setting: ::core::option::Option<GameSetting>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameTestingEnvironmentSet {
    #[prost(uint32, tag = "1")]
    pub paixing: u32,
    #[prost(uint32, tag = "2")]
    pub left_count: u32,
    #[prost(uint32, tag = "3")]
    pub field_spell_var: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameDetailRule {
    #[prost(uint32, tag = "1")]
    pub time_fixed: u32,
    #[prost(uint32, tag = "2")]
    pub time_add: u32,
    #[prost(uint32, tag = "3")]
    pub dora_count: u32,
    #[prost(uint32, tag = "4")]
    pub shiduan: u32,
    #[prost(uint32, tag = "5")]
    pub init_point: u32,
    #[prost(uint32, tag = "6")]
    pub fandian: u32,
    #[prost(bool, tag = "7")]
    pub can_jifei: bool,
    #[prost(uint32, tag = "8")]
    pub tianbian_value: u32,
    #[prost(uint32, tag = "9")]
    pub liqibang_value: u32,
    #[prost(uint32, tag = "10")]
    pub changbang_value: u32,
    #[prost(uint32, tag = "11")]
    pub noting_fafu_1: u32,
    #[prost(uint32, tag = "12")]
    pub noting_fafu_2: u32,
    #[prost(uint32, tag = "13")]
    pub noting_fafu_3: u32,
    #[prost(bool, tag = "14")]
    pub have_liujumanguan: bool,
    #[prost(bool, tag = "15")]
    pub have_qieshangmanguan: bool,
    #[prost(bool, tag = "16")]
    pub have_biao_dora: bool,
    #[prost(bool, tag = "17")]
    pub have_gang_biao_dora: bool,
    #[prost(bool, tag = "18")]
    pub ming_dora_immediately_open: bool,
    #[prost(bool, tag = "19")]
    pub have_li_dora: bool,
    #[prost(bool, tag = "20")]
    pub have_gang_li_dora: bool,
    #[prost(bool, tag = "21")]
    pub have_sifenglianda: bool,
    #[prost(bool, tag = "22")]
    pub have_sigangsanle: bool,
    #[prost(bool, tag = "23")]
    pub have_sijializhi: bool,
    #[prost(bool, tag = "24")]
    pub have_jiuzhongjiupai: bool,
    #[prost(bool, tag = "25")]
    pub have_sanjiahele: bool,
    #[prost(bool, tag = "26")]
    pub have_toutiao: bool,
    #[prost(bool, tag = "27")]
    pub have_helelianzhuang: bool,
    #[prost(bool, tag = "28")]
    pub have_helezhongju: bool,
    #[prost(bool, tag = "29")]
    pub have_tingpailianzhuang: bool,
    #[prost(bool, tag = "30")]
    pub have_tingpaizhongju: bool,
    #[prost(bool, tag = "31")]
    pub have_yifa: bool,
    #[prost(bool, tag = "32")]
    pub have_nanruxiru: bool,
    #[prost(uint32, tag = "33")]
    pub jingsuanyuandian: u32,
    #[prost(int32, tag = "34")]
    pub shunweima_2: i32,
    #[prost(int32, tag = "35")]
    pub shunweima_3: i32,
    #[prost(int32, tag = "36")]
    pub shunweima_4: i32,
    #[prost(bool, tag = "37")]
    pub bianjietishi: bool,
    #[prost(uint32, tag = "38")]
    pub ai_level: u32,
    #[prost(bool, tag = "39")]
    pub have_zimosun: bool,
    #[prost(bool, tag = "40")]
    pub disable_multi_yukaman: bool,
    #[prost(uint32, tag = "41")]
    pub fanfu: u32,
    #[prost(uint32, tag = "42")]
    pub guyi_mode: u32,
    #[prost(uint32, tag = "43")]
    pub dora3_mode: u32,
    #[prost(uint32, tag = "44")]
    pub begin_open_mode: u32,
    #[prost(uint32, tag = "45")]
    pub jiuchao_mode: u32,
    #[prost(uint32, tag = "46")]
    pub muyu_mode: u32,
    #[prost(uint32, tag = "47")]
    pub open_hand: u32,
    #[prost(uint32, tag = "48")]
    pub xuezhandaodi: u32,
    #[prost(uint32, tag = "49")]
    pub huansanzhang: u32,
    #[prost(uint32, tag = "50")]
    pub chuanma: u32,
    #[prost(uint32, tag = "51")]
    pub reveal_discard: u32,
    #[prost(uint32, tag = "52")]
    pub field_spell_mode: u32,
    #[prost(uint32, tag = "53")]
    pub zhanxing: u32,
    #[prost(uint32, tag = "54")]
    pub tianming_mode: u32,
    #[prost(bool, tag = "60")]
    pub disable_leijiyiman: bool,
    #[prost(uint32, tag = "62")]
    pub disable_double_yakuman: u32,
    #[prost(uint32, tag = "63")]
    pub disable_composite_yakuman: u32,
    #[prost(uint32, tag = "64")]
    pub enable_shiti: u32,
    #[prost(uint32, tag = "65")]
    pub enable_nontsumo_liqi: u32,
    #[prost(uint32, tag = "66")]
    pub disable_double_wind_four_fu: u32,
    #[prost(uint32, tag = "67")]
    pub disable_angang_guoshi: u32,
    #[prost(uint32, tag = "68")]
    pub enable_renhe: u32,
    #[prost(uint32, tag = "69")]
    pub enable_baopai_extend_settings: u32,
    #[prost(uint32, tag = "70")]
    pub yongchang_mode: u32,
    #[prost(uint32, tag = "71")]
    pub hunzhiyiji_mode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Room {
    #[prost(uint32, tag = "1")]
    pub room_id: u32,
    #[prost(uint32, tag = "2")]
    pub owner_id: u32,
    #[prost(message, optional, tag = "3")]
    pub mode: ::core::option::Option<GameMode>,
    #[prost(uint32, tag = "4")]
    pub max_player_count: u32,
    #[prost(message, repeated, tag = "5")]
    pub persons: ::prost::alloc::vec::Vec<PlayerGameView>,
    #[prost(uint32, repeated, tag = "6")]
    pub ready_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub is_playing: bool,
    #[prost(bool, tag = "8")]
    pub public_live: bool,
    #[prost(uint32, tag = "9")]
    pub robot_count: u32,
    #[prost(uint32, tag = "10")]
    pub tournament_id: u32,
    #[prost(uint32, tag = "11")]
    pub seq: u32,
    #[prost(string, tag = "12")]
    pub pre_rule: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameEndResult {
    #[prost(message, repeated, tag = "1")]
    pub players: ::prost::alloc::vec::Vec<game_end_result::PlayerItem>,
}
/// Nested message and enum types in `GameEndResult`.
pub mod game_end_result {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PlayerItem {
        #[prost(uint32, tag = "1")]
        pub seat: u32,
        #[prost(int32, tag = "2")]
        pub total_point: i32,
        #[prost(int32, tag = "3")]
        pub part_point_1: i32,
        #[prost(int32, tag = "4")]
        pub part_point_2: i32,
        #[prost(int32, tag = "5")]
        pub grading_score: i32,
        #[prost(int32, tag = "6")]
        pub gold: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameConnectInfo {
    #[prost(string, tag = "2")]
    pub connect_token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub location: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemGainRecord {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemGainRecords {
    #[prost(uint32, tag = "1")]
    pub record_time: u32,
    #[prost(uint32, tag = "2")]
    pub limit_source_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<ItemGainRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FakeRandomRecords {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub special_item_id: u32,
    #[prost(uint32, tag = "3")]
    pub gain_count: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub gain_history: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub stack: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bag {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(message, repeated, tag = "2")]
    pub daily_gain_record: ::prost::alloc::vec::Vec<ItemGainRecords>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BagUpdate {
    #[prost(message, repeated, tag = "1")]
    pub update_items: ::prost::alloc::vec::Vec<Item>,
    #[prost(message, repeated, tag = "2")]
    pub update_daily_gain_record: ::prost::alloc::vec::Vec<ItemGainRecords>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RewardSlot {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenResult {
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<RewardSlot>,
    #[prost(message, optional, tag = "2")]
    pub replace: ::core::option::Option<RewardSlot>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RewardPlusResult {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(message, optional, tag = "3")]
    pub exchange: ::core::option::Option<reward_plus_result::Exchange>,
}
/// Nested message and enum types in `RewardPlusResult`.
pub mod reward_plus_result {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Exchange {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
        #[prost(uint32, tag = "3")]
        pub exchange: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExecuteReward {
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<RewardSlot>,
    #[prost(message, optional, tag = "2")]
    pub replace: ::core::option::Option<RewardSlot>,
    #[prost(uint32, tag = "3")]
    pub replace_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExecuteResult {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(int32, tag = "2")]
    pub count: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct I18nContext {
    #[prost(string, tag = "1")]
    pub lang: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub context: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mail {
    #[prost(uint32, tag = "1")]
    pub mail_id: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(bool, tag = "3")]
    pub take_attachment: bool,
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub content: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub attachments: ::prost::alloc::vec::Vec<RewardSlot>,
    #[prost(uint32, tag = "7")]
    pub create_time: u32,
    #[prost(uint32, tag = "8")]
    pub expire_time: u32,
    #[prost(uint32, tag = "9")]
    pub reference_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub title_i18n: ::prost::alloc::vec::Vec<I18nContext>,
    #[prost(message, repeated, tag = "11")]
    pub content_i18n: ::prost::alloc::vec::Vec<I18nContext>,
    #[prost(uint32, tag = "12")]
    pub template_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AchievementProgress {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub counter: u32,
    #[prost(bool, tag = "3")]
    pub achieved: bool,
    #[prost(bool, tag = "4")]
    pub rewarded: bool,
    #[prost(uint32, tag = "5")]
    pub achieved_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountStatisticByGameMode {
    #[prost(uint32, tag = "1")]
    pub mode: u32,
    #[prost(uint32, tag = "2")]
    pub game_count_sum: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub game_final_position: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub fly_count: u32,
    #[prost(float, tag = "5")]
    pub gold_earn_sum: f32,
    #[prost(uint32, tag = "6")]
    pub round_count_sum: u32,
    #[prost(float, tag = "7")]
    pub dadian_sum: f32,
    #[prost(message, repeated, tag = "8")]
    pub round_end: ::prost::alloc::vec::Vec<account_statistic_by_game_mode::RoundEndData>,
    #[prost(uint32, tag = "9")]
    pub ming_count_sum: u32,
    #[prost(uint32, tag = "10")]
    pub liqi_count_sum: u32,
    #[prost(uint32, tag = "11")]
    pub xun_count_sum: u32,
    #[prost(uint32, tag = "12")]
    pub highest_lianzhuang: u32,
    #[prost(uint32, tag = "13")]
    pub score_earn_sum: u32,
    #[prost(message, repeated, tag = "14")]
    pub rank_score: ::prost::alloc::vec::Vec<account_statistic_by_game_mode::RankScore>,
}
/// Nested message and enum types in `AccountStatisticByGameMode`.
pub mod account_statistic_by_game_mode {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RoundEndData {
        #[prost(uint32, tag = "1")]
        pub r#type: u32,
        #[prost(uint32, tag = "2")]
        pub sum: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RankScore {
        #[prost(uint32, tag = "1")]
        pub rank: u32,
        #[prost(int32, tag = "2")]
        pub score_sum: i32,
        #[prost(uint32, tag = "3")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccountStatisticByFan {
    #[prost(uint32, tag = "1")]
    pub fan_id: u32,
    #[prost(uint32, tag = "2")]
    pub sum: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountFanAchieved {
    #[prost(uint32, tag = "1")]
    pub mahjong_category: u32,
    #[prost(message, repeated, tag = "2")]
    pub fan: ::prost::alloc::vec::Vec<AccountStatisticByFan>,
    #[prost(uint32, tag = "3")]
    pub liujumanguan: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountDetailStatistic {
    #[prost(message, repeated, tag = "1")]
    pub game_mode: ::prost::alloc::vec::Vec<AccountStatisticByGameMode>,
    #[prost(message, repeated, tag = "2")]
    pub fan: ::prost::alloc::vec::Vec<AccountStatisticByFan>,
    #[prost(uint32, tag = "3")]
    pub liujumanguan: u32,
    #[prost(message, repeated, tag = "4")]
    pub fan_achieved: ::prost::alloc::vec::Vec<AccountFanAchieved>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountDetailStatisticByCategory {
    #[prost(uint32, tag = "1")]
    pub category: u32,
    #[prost(message, optional, tag = "2")]
    pub detail_statistic: ::core::option::Option<AccountDetailStatistic>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountDetailStatisticV2 {
    #[prost(message, optional, tag = "1")]
    pub friend_room_statistic: ::core::option::Option<AccountDetailStatistic>,
    #[prost(message, optional, tag = "2")]
    pub rank_statistic: ::core::option::Option<account_detail_statistic_v2::RankStatistic>,
    #[prost(message, optional, tag = "3")]
    pub customized_contest_statistic:
        ::core::option::Option<account_detail_statistic_v2::CustomizedContestStatistic>,
    #[prost(message, optional, tag = "4")]
    pub leisure_match_statistic: ::core::option::Option<AccountDetailStatistic>,
    #[prost(message, optional, tag = "5")]
    pub challenge_match_statistic:
        ::core::option::Option<account_detail_statistic_v2::ChallengeStatistic>,
    #[prost(message, optional, tag = "6")]
    pub activity_match_statistic: ::core::option::Option<AccountDetailStatistic>,
    #[prost(message, optional, tag = "7")]
    pub ab_match_statistic: ::core::option::Option<AccountDetailStatistic>,
}
/// Nested message and enum types in `AccountDetailStatisticV2`.
pub mod account_detail_statistic_v2 {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RankStatistic {
        #[prost(message, optional, tag = "1")]
        pub total_statistic: ::core::option::Option<rank_statistic::RankData>,
        #[prost(message, optional, tag = "2")]
        pub month_statistic: ::core::option::Option<rank_statistic::RankData>,
        #[prost(uint32, tag = "3")]
        pub month_refresh_time: u32,
    }
    /// Nested message and enum types in `RankStatistic`.
    pub mod rank_statistic {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct RankData {
            #[prost(message, optional, tag = "1")]
            pub all_level_statistic: ::core::option::Option<super::super::AccountDetailStatistic>,
            #[prost(message, repeated, tag = "2")]
            pub level_data_list: ::prost::alloc::vec::Vec<rank_data::RankLevelData>,
        }
        /// Nested message and enum types in `RankData`.
        pub mod rank_data {
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct RankLevelData {
                #[prost(uint32, tag = "1")]
                pub rank_level: u32,
                #[prost(message, optional, tag = "2")]
                pub statistic: ::core::option::Option<super::super::super::AccountDetailStatistic>,
            }
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CustomizedContestStatistic {
        #[prost(message, optional, tag = "1")]
        pub total_statistic: ::core::option::Option<super::AccountDetailStatistic>,
        #[prost(message, optional, tag = "2")]
        pub month_statistic: ::core::option::Option<super::AccountDetailStatistic>,
        #[prost(uint32, tag = "3")]
        pub month_refresh_time: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChallengeStatistic {
        #[prost(message, optional, tag = "1")]
        pub all_season: ::core::option::Option<super::AccountDetailStatistic>,
        #[prost(message, repeated, tag = "2")]
        pub season_data_list: ::prost::alloc::vec::Vec<challenge_statistic::SeasonData>,
    }
    /// Nested message and enum types in `ChallengeStatistic`.
    pub mod challenge_statistic {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SeasonData {
            #[prost(uint32, tag = "1")]
            pub season_id: u32,
            #[prost(message, optional, tag = "2")]
            pub statistic: ::core::option::Option<super::super::AccountDetailStatistic>,
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccountShiLian {
    #[prost(uint32, tag = "1")]
    pub step: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDeviceInfo {
    #[prost(string, tag = "1")]
    pub platform: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub hardware: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub os: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub os_version: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_browser: bool,
    #[prost(string, tag = "6")]
    pub software: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub sale_platform: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub hardware_vendor: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub model_number: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub screen_width: u32,
    #[prost(uint32, tag = "11")]
    pub screen_height: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientVersionInfo {
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub package: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Announcement {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub header_image: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaskProgress {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub counter: u32,
    #[prost(bool, tag = "3")]
    pub achieved: bool,
    #[prost(bool, tag = "4")]
    pub rewarded: bool,
    #[prost(bool, tag = "5")]
    pub failed: bool,
    #[prost(uint32, tag = "6")]
    pub rewarded_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameConfig {
    #[prost(uint32, tag = "1")]
    pub category: u32,
    #[prost(message, optional, tag = "2")]
    pub mode: ::core::option::Option<GameMode>,
    #[prost(message, optional, tag = "3")]
    pub meta: ::core::option::Option<GameMetaData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RpgState {
    #[prost(uint32, tag = "1")]
    pub player_damaged: u32,
    #[prost(uint32, tag = "2")]
    pub monster_damaged: u32,
    #[prost(uint32, tag = "3")]
    pub monster_seq: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RpgActivity {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(string, tag = "5")]
    pub last_show_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub last_played_uuid: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub current_state: ::core::option::Option<RpgState>,
    #[prost(message, optional, tag = "8")]
    pub last_show_state: ::core::option::Option<RpgState>,
    #[prost(uint32, repeated, tag = "9")]
    pub received_rewards: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub last_show_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityArenaData {
    #[prost(uint32, tag = "1")]
    pub win_count: u32,
    #[prost(uint32, tag = "2")]
    pub lose_count: u32,
    #[prost(uint32, tag = "3")]
    pub activity_id: u32,
    #[prost(uint32, tag = "4")]
    pub enter_time: u32,
    #[prost(uint32, tag = "5")]
    pub daily_enter_count: u32,
    #[prost(uint32, tag = "6")]
    pub daily_enter_time: u32,
    #[prost(uint32, tag = "7")]
    pub max_win_count: u32,
    #[prost(uint32, tag = "8")]
    pub total_win_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeedActivityData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub feed_count: u32,
    #[prost(message, optional, tag = "3")]
    pub friend_receive_data: ::core::option::Option<feed_activity_data::CountWithTimeData>,
    #[prost(message, optional, tag = "4")]
    pub friend_send_data: ::core::option::Option<feed_activity_data::CountWithTimeData>,
    #[prost(message, repeated, tag = "5")]
    pub gift_inbox: ::prost::alloc::vec::Vec<feed_activity_data::GiftBoxData>,
}
/// Nested message and enum types in `FeedActivityData`.
pub mod feed_activity_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CountWithTimeData {
        #[prost(uint32, tag = "1")]
        pub count: u32,
        #[prost(uint32, tag = "2")]
        pub last_update_time: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GiftBoxData {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub item_id: u32,
        #[prost(uint32, tag = "3")]
        pub count: u32,
        #[prost(uint32, tag = "4")]
        pub from_account_id: u32,
        #[prost(uint32, tag = "5")]
        pub time: u32,
        #[prost(uint32, tag = "6")]
        pub received: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SegmentTaskProgress {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub counter: u32,
    #[prost(bool, tag = "3")]
    pub achieved: bool,
    #[prost(bool, tag = "4")]
    pub rewarded: bool,
    #[prost(bool, tag = "5")]
    pub failed: bool,
    #[prost(uint32, tag = "6")]
    pub reward_count: u32,
    #[prost(uint32, tag = "7")]
    pub achieved_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MineActivityData {
    #[prost(message, repeated, tag = "1")]
    pub dig_point: ::prost::alloc::vec::Vec<Point>,
    #[prost(message, repeated, tag = "2")]
    pub map: ::prost::alloc::vec::Vec<MineReward>,
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountActivityUpdate {
    #[prost(message, repeated, tag = "1")]
    pub mine_data: ::prost::alloc::vec::Vec<MineActivityData>,
    #[prost(message, repeated, tag = "2")]
    pub rpg_data: ::prost::alloc::vec::Vec<RpgActivity>,
    #[prost(message, repeated, tag = "3")]
    pub feed_data: ::prost::alloc::vec::Vec<ActivityFeedData>,
    #[prost(message, repeated, tag = "4")]
    pub spot_data: ::prost::alloc::vec::Vec<ActivitySpotData>,
    #[prost(message, repeated, tag = "5")]
    pub friend_gift_data: ::prost::alloc::vec::Vec<ActivityFriendGiftData>,
    #[prost(message, repeated, tag = "6")]
    pub upgrade_data: ::prost::alloc::vec::Vec<ActivityUpgradeData>,
    #[prost(message, repeated, tag = "7")]
    pub gacha_data: ::prost::alloc::vec::Vec<ActivityGachaUpdateData>,
    #[prost(message, repeated, tag = "8")]
    pub simulation_data: ::prost::alloc::vec::Vec<ActivitySimulationData>,
    #[prost(message, repeated, tag = "9")]
    pub combining_data: ::prost::alloc::vec::Vec<ActivityCombiningLqData>,
    #[prost(message, repeated, tag = "10")]
    pub village_data: ::prost::alloc::vec::Vec<ActivityVillageData>,
    #[prost(message, repeated, tag = "11")]
    pub festival_data: ::prost::alloc::vec::Vec<ActivityFestivalData>,
    #[prost(message, repeated, tag = "12")]
    pub island_data: ::prost::alloc::vec::Vec<ActivityIslandData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityCombiningWorkbench {
    #[prost(uint32, tag = "1")]
    pub craft_id: u32,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityCombiningMenuData {
    #[prost(uint32, tag = "1")]
    pub menu_group: u32,
    #[prost(message, repeated, tag = "2")]
    pub generated: ::prost::alloc::vec::Vec<activity_combining_menu_data::MenuRequire>,
}
/// Nested message and enum types in `ActivityCombiningMenuData`.
pub mod activity_combining_menu_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MenuRequire {
        #[prost(uint32, tag = "1")]
        pub level: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityCombiningOrderData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
    #[prost(uint32, tag = "3")]
    pub craft_id: u32,
    #[prost(uint32, tag = "4")]
    pub unlock_day: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityCombiningLqData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub workbench: ::prost::alloc::vec::Vec<ActivityCombiningWorkbench>,
    #[prost(message, repeated, tag = "3")]
    pub orders: ::prost::alloc::vec::Vec<ActivityCombiningOrderData>,
    #[prost(message, optional, tag = "4")]
    pub recycle_bin: ::core::option::Option<ActivityCombiningWorkbench>,
    #[prost(uint32, repeated, tag = "5")]
    pub unlocked_craft: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityCombiningPoolData {
    #[prost(uint32, tag = "1")]
    pub group: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityCombiningData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub workbench: ::prost::alloc::vec::Vec<ActivityCombiningWorkbench>,
    #[prost(message, repeated, tag = "3")]
    pub orders: ::prost::alloc::vec::Vec<ActivityCombiningOrderData>,
    #[prost(message, optional, tag = "4")]
    pub recycle_bin: ::core::option::Option<ActivityCombiningWorkbench>,
    #[prost(message, optional, tag = "5")]
    pub menu: ::core::option::Option<ActivityCombiningMenuData>,
    #[prost(uint32, tag = "6")]
    pub current_order_id: u32,
    #[prost(message, optional, tag = "7")]
    pub bonus: ::core::option::Option<activity_combining_data::BonusData>,
    #[prost(uint32, repeated, tag = "8")]
    pub unlocked_craft: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub craft_pool: ::prost::alloc::vec::Vec<ActivityCombiningPoolData>,
    #[prost(message, repeated, tag = "10")]
    pub order_pool: ::prost::alloc::vec::Vec<ActivityCombiningPoolData>,
}
/// Nested message and enum types in `ActivityCombiningData`.
pub mod activity_combining_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct BonusData {
        #[prost(uint32, tag = "1")]
        pub count: u32,
        #[prost(uint32, tag = "2")]
        pub update_time: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VillageReward {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VillageBuildingData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, repeated, tag = "3")]
    pub reward: ::prost::alloc::vec::Vec<VillageReward>,
    #[prost(uint32, repeated, tag = "4")]
    pub workers: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VillageTripData {
    #[prost(uint32, tag = "1")]
    pub start_round: u32,
    #[prost(uint32, tag = "2")]
    pub dest_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub reward: ::prost::alloc::vec::Vec<VillageReward>,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(message, optional, tag = "5")]
    pub info: ::core::option::Option<VillageTargetInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VillageTaskData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub completed_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VillageTargetInfo {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub avatar: u32,
    #[prost(uint32, tag = "3")]
    pub avatar_frame: u32,
    #[prost(uint32, tag = "4")]
    pub title: u32,
    #[prost(uint32, tag = "5")]
    pub verified: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityVillageData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub buildings: ::prost::alloc::vec::Vec<VillageBuildingData>,
    #[prost(message, repeated, tag = "3")]
    pub trip: ::prost::alloc::vec::Vec<VillageTripData>,
    #[prost(message, repeated, tag = "6")]
    pub tasks: ::prost::alloc::vec::Vec<VillageTaskData>,
    #[prost(uint32, tag = "7")]
    pub round: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimeCounterData {
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(uint32, tag = "2")]
    pub update_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignedTimeCounterData {
    #[prost(int32, tag = "1")]
    pub count: i32,
    #[prost(uint32, tag = "2")]
    pub update_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FestivalProposalData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub proposal_id: u32,
    #[prost(uint32, tag = "3")]
    pub pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityFestivalData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(message, repeated, tag = "3")]
    pub proposal_list: ::prost::alloc::vec::Vec<FestivalProposalData>,
    #[prost(uint32, repeated, tag = "4")]
    pub event_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub buy_record: ::core::option::Option<SignedTimeCounterData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IslandBagItemData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub pos: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub rotate: u32,
    #[prost(uint32, tag = "4")]
    pub goods_id: u32,
    #[prost(uint32, tag = "5")]
    pub price: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IslandBagData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub matrix: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub items: ::prost::alloc::vec::Vec<IslandBagItemData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IslandGoodsData {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(int32, tag = "2")]
    pub count: i32,
    #[prost(uint32, tag = "3")]
    pub update_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IslandZoneData {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, optional, tag = "2")]
    pub currency_used: ::core::option::Option<SignedTimeCounterData>,
    #[prost(message, repeated, tag = "3")]
    pub goods_records: ::prost::alloc::vec::Vec<IslandGoodsData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityIslandData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub zone: u32,
    #[prost(message, repeated, tag = "3")]
    pub bags: ::prost::alloc::vec::Vec<IslandBagData>,
    #[prost(message, repeated, tag = "4")]
    pub zones: ::prost::alloc::vec::Vec<IslandZoneData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityFeedData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub feed_count: u32,
    #[prost(message, optional, tag = "3")]
    pub friend_receive_data: ::core::option::Option<activity_feed_data::CountWithTimeData>,
    #[prost(message, optional, tag = "4")]
    pub friend_send_data: ::core::option::Option<activity_feed_data::CountWithTimeData>,
    #[prost(message, repeated, tag = "5")]
    pub gift_inbox: ::prost::alloc::vec::Vec<activity_feed_data::GiftBoxData>,
    #[prost(uint32, tag = "6")]
    pub max_inbox_id: u32,
}
/// Nested message and enum types in `ActivityFeedData`.
pub mod activity_feed_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CountWithTimeData {
        #[prost(uint32, tag = "1")]
        pub count: u32,
        #[prost(uint32, tag = "2")]
        pub last_update_time: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GiftBoxData {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub item_id: u32,
        #[prost(uint32, tag = "3")]
        pub count: u32,
        #[prost(uint32, tag = "4")]
        pub from_account_id: u32,
        #[prost(uint32, tag = "5")]
        pub time: u32,
        #[prost(uint32, tag = "6")]
        pub received: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityFriendGiftData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub max_inbox_id: u32,
    #[prost(message, optional, tag = "3")]
    pub receive_data: ::core::option::Option<activity_friend_gift_data::CountWithTimeData>,
    #[prost(message, optional, tag = "4")]
    pub send_data: ::core::option::Option<activity_friend_gift_data::CountWithTimeData>,
    #[prost(message, repeated, tag = "5")]
    pub gift_inbox: ::prost::alloc::vec::Vec<activity_friend_gift_data::GiftBoxData>,
}
/// Nested message and enum types in `ActivityFriendGiftData`.
pub mod activity_friend_gift_data {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CountWithTimeData {
        #[prost(uint32, tag = "1")]
        pub count: u32,
        #[prost(uint32, tag = "2")]
        pub last_update_time: u32,
        #[prost(uint32, repeated, tag = "3")]
        pub send_friend_id: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct GiftBoxData {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub item_id: u32,
        #[prost(uint32, tag = "3")]
        pub count: u32,
        #[prost(uint32, tag = "4")]
        pub from_account_id: u32,
        #[prost(uint32, tag = "5")]
        pub time: u32,
        #[prost(uint32, tag = "6")]
        pub received: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityUpgradeData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub groups: ::prost::alloc::vec::Vec<activity_upgrade_data::LevelGroup>,
    #[prost(uint32, tag = "3")]
    pub received_level: u32,
}
/// Nested message and enum types in `ActivityUpgradeData`.
pub mod activity_upgrade_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LevelGroup {
        #[prost(uint32, tag = "1")]
        pub group_id: u32,
        #[prost(uint32, tag = "2")]
        pub level: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GachaRecord {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityGachaData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub gained: ::prost::alloc::vec::Vec<GachaRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityGachaUpdateData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub gained: ::prost::alloc::vec::Vec<GachaRecord>,
    #[prost(uint32, tag = "3")]
    pub remain_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivitySimulationGameRecordMessage {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub args: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub xun: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivitySimulationGameRecord {
    #[prost(uint32, tag = "1")]
    pub round: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub seats: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "3")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub start_time: u32,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "6")]
    pub messages: ::prost::alloc::vec::Vec<ActivitySimulationGameRecordMessage>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivitySimulationDailyContest {
    #[prost(uint32, tag = "1")]
    pub day: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub characters: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<ActivitySimulationGameRecord>,
    #[prost(uint32, tag = "4")]
    pub round: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivitySimulationTrainRecord {
    #[prost(uint32, tag = "1")]
    pub time: u32,
    #[prost(int32, repeated, tag = "2")]
    pub modify_stats: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "3")]
    pub final_stats: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivitySimulationData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub stats: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub stamina_update_time: u32,
    #[prost(message, repeated, tag = "4")]
    pub daily_contest: ::prost::alloc::vec::Vec<ActivitySimulationDailyContest>,
    #[prost(message, repeated, tag = "5")]
    pub train_records: ::prost::alloc::vec::Vec<ActivitySimulationTrainRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivitySpotData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub spots: ::prost::alloc::vec::Vec<activity_spot_data::SpotData>,
}
/// Nested message and enum types in `ActivitySpotData`.
pub mod activity_spot_data {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SpotData {
        #[prost(uint32, tag = "1")]
        pub unique_id: u32,
        #[prost(uint32, tag = "2")]
        pub rewarded: u32,
        #[prost(uint32, repeated, tag = "3")]
        pub unlocked_ending: ::prost::alloc::vec::Vec<u32>,
        #[prost(uint32, tag = "4")]
        pub unlocked: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountActiveState {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(uint32, tag = "2")]
    pub login_time: u32,
    #[prost(uint32, tag = "3")]
    pub logout_time: u32,
    #[prost(bool, tag = "4")]
    pub is_online: bool,
    #[prost(message, optional, tag = "5")]
    pub playing: ::core::option::Option<AccountPlayingGame>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Friend {
    #[prost(message, optional, tag = "1")]
    pub base: ::core::option::Option<PlayerBaseView>,
    #[prost(message, optional, tag = "2")]
    pub state: ::core::option::Option<AccountActiveState>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Point {
    #[prost(uint32, tag = "1")]
    pub x: u32,
    #[prost(uint32, tag = "2")]
    pub y: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MineReward {
    #[prost(message, optional, tag = "1")]
    pub point: ::core::option::Option<Point>,
    #[prost(uint32, tag = "2")]
    pub reward_id: u32,
    #[prost(bool, tag = "3")]
    pub received: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameLiveUnit {
    #[prost(uint32, tag = "1")]
    pub timestamp: u32,
    #[prost(uint32, tag = "2")]
    pub action_category: u32,
    #[prost(bytes = "vec", tag = "3")]
    pub action_data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameLiveSegment {
    #[prost(message, repeated, tag = "1")]
    pub actions: ::prost::alloc::vec::Vec<GameLiveUnit>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameLiveSegmentUri {
    #[prost(uint32, tag = "1")]
    pub segment_id: u32,
    #[prost(string, tag = "2")]
    pub segment_uri: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameLiveHead {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub start_time: u32,
    #[prost(message, optional, tag = "3")]
    pub game_config: ::core::option::Option<GameConfig>,
    #[prost(message, repeated, tag = "4")]
    pub players: ::prost::alloc::vec::Vec<PlayerGameView>,
    #[prost(uint32, repeated, tag = "5")]
    pub seat_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameNewRoundState {
    #[prost(uint32, repeated, tag = "1")]
    pub seat_states: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameEndAction {
    #[prost(uint32, tag = "1")]
    pub state: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameNoopAction {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommentItem {
    #[prost(uint32, tag = "1")]
    pub comment_id: u32,
    #[prost(uint32, tag = "2")]
    pub timestamp: u32,
    #[prost(message, optional, tag = "3")]
    pub commenter: ::core::option::Option<PlayerBaseView>,
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub is_banned: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RollingNotice {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start_time: u32,
    #[prost(uint32, tag = "4")]
    pub end_time: u32,
    #[prost(uint32, tag = "5")]
    pub repeat_interval: u32,
    #[prost(string, tag = "6")]
    pub lang: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BillingGoods {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub desc: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub icon: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub resource_id: u32,
    #[prost(uint32, tag = "6")]
    pub resource_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BillShortcut {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(uint32, tag = "3")]
    pub deal_price: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BillingProduct {
    #[prost(message, optional, tag = "1")]
    pub goods: ::core::option::Option<BillingGoods>,
    #[prost(string, tag = "2")]
    pub currency_code: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub currency_price: u32,
    #[prost(uint32, tag = "4")]
    pub sort_weight: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Character {
    #[prost(uint32, tag = "1")]
    pub charid: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(message, repeated, tag = "4")]
    pub views: ::prost::alloc::vec::Vec<ViewSlot>,
    #[prost(uint32, tag = "5")]
    pub skin: u32,
    #[prost(bool, tag = "6")]
    pub is_upgraded: bool,
    #[prost(uint32, repeated, tag = "7")]
    pub extra_emoji: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub rewarded_level: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyRecord {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ZhpShop {
    #[prost(uint32, repeated, tag = "1")]
    pub goods: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub buy_records: ::prost::alloc::vec::Vec<BuyRecord>,
    #[prost(message, optional, tag = "3")]
    pub free_refresh: ::core::option::Option<zhp_shop::RefreshCount>,
    #[prost(message, optional, tag = "4")]
    pub cost_refresh: ::core::option::Option<zhp_shop::RefreshCount>,
}
/// Nested message and enum types in `ZHPShop`.
pub mod zhp_shop {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RefreshCount {
        #[prost(uint32, tag = "1")]
        pub count: u32,
        #[prost(uint32, tag = "2")]
        pub limit: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonthTicketInfo {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub end_time: u32,
    #[prost(uint32, tag = "3")]
    pub last_pay_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShopInfo {
    #[prost(message, optional, tag = "1")]
    pub zhp: ::core::option::Option<ZhpShop>,
    #[prost(message, repeated, tag = "2")]
    pub buy_records: ::prost::alloc::vec::Vec<BuyRecord>,
    #[prost(uint32, tag = "3")]
    pub last_refresh_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeNicknameRecord {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub to: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerSettings {
    #[prost(message, optional, tag = "3")]
    pub payment_setting: ::core::option::Option<PaymentSetting>,
    #[prost(message, optional, tag = "4")]
    pub payment_setting_v2: ::core::option::Option<PaymentSettingV2>,
    #[prost(message, optional, tag = "5")]
    pub nickname_setting: ::core::option::Option<NicknameSetting>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NicknameSetting {
    #[prost(uint32, tag = "1")]
    pub enable: u32,
    #[prost(string, repeated, tag = "2")]
    pub nicknames: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaymentSettingV2 {
    #[prost(uint32, tag = "1")]
    pub open_payment: u32,
    #[prost(message, repeated, tag = "2")]
    pub payment_platforms: ::prost::alloc::vec::Vec<payment_setting_v2::PaymentSettingUnit>,
}
/// Nested message and enum types in `PaymentSettingV2`.
pub mod payment_setting_v2 {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PaymentMaintain {
        #[prost(uint32, tag = "1")]
        pub start_time: u32,
        #[prost(uint32, tag = "2")]
        pub end_time: u32,
        #[prost(uint32, tag = "3")]
        pub goods_click_action: u32,
        #[prost(string, tag = "4")]
        pub goods_click_text: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "5")]
        pub enabled_channel: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PaymentSettingUnit {
        #[prost(string, tag = "1")]
        pub platform: ::prost::alloc::string::String,
        #[prost(bool, tag = "2")]
        pub is_show: bool,
        #[prost(uint32, tag = "3")]
        pub goods_click_action: u32,
        #[prost(string, tag = "4")]
        pub goods_click_text: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "5")]
        pub maintain: ::core::option::Option<PaymentMaintain>,
        #[prost(bool, tag = "6")]
        pub enable_for_frozen_account: bool,
        #[prost(string, tag = "7")]
        pub extra_data: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "8")]
        pub enabled_channel: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaymentSetting {
    #[prost(uint32, tag = "1")]
    pub open_payment: u32,
    #[prost(uint32, tag = "2")]
    pub payment_info_show_type: u32,
    #[prost(string, tag = "3")]
    pub payment_info: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub wechat: ::core::option::Option<payment_setting::WechatData>,
    #[prost(message, optional, tag = "5")]
    pub alipay: ::core::option::Option<payment_setting::AlipayData>,
}
/// Nested message and enum types in `PaymentSetting`.
pub mod payment_setting {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct WechatData {
        #[prost(bool, tag = "1")]
        pub disable_create: bool,
        #[prost(uint32, tag = "2")]
        pub payment_source_platform: u32,
        #[prost(bool, tag = "3")]
        pub enable_credit: bool,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AlipayData {
        #[prost(bool, tag = "1")]
        pub disable_create: bool,
        #[prost(uint32, tag = "2")]
        pub payment_source_platform: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccountSetting {
    #[prost(uint32, tag = "1")]
    pub key: u32,
    #[prost(uint32, tag = "2")]
    pub value: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChestData {
    #[prost(uint32, tag = "1")]
    pub chest_id: u32,
    #[prost(uint32, tag = "2")]
    pub total_open_count: u32,
    #[prost(uint32, tag = "3")]
    pub consume_count: u32,
    #[prost(uint32, tag = "4")]
    pub face_black_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChestDataV2 {
    #[prost(uint32, tag = "1")]
    pub chest_id: u32,
    #[prost(uint32, tag = "2")]
    pub total_open_count: u32,
    #[prost(uint32, tag = "3")]
    pub face_black_count: u32,
    #[prost(uint32, tag = "4")]
    pub ticket_face_black_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FaithData {
    #[prost(uint32, tag = "1")]
    pub faith_id: u32,
    #[prost(uint32, tag = "2")]
    pub total_open_count: u32,
    #[prost(uint32, tag = "3")]
    pub consume_count: u32,
    #[prost(int32, tag = "4")]
    pub modify_count: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestBase {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub contest_id: u32,
    #[prost(string, tag = "3")]
    pub contest_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub state: u32,
    #[prost(uint32, tag = "5")]
    pub creator_id: u32,
    #[prost(uint32, tag = "6")]
    pub create_time: u32,
    #[prost(uint32, tag = "7")]
    pub start_time: u32,
    #[prost(uint32, tag = "8")]
    pub finish_time: u32,
    #[prost(bool, tag = "9")]
    pub open: bool,
    #[prost(uint32, tag = "10")]
    pub contest_type: u32,
    #[prost(string, tag = "11")]
    pub public_notice: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub check_state: u32,
    #[prost(string, tag = "13")]
    pub checking_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestExtend {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(string, tag = "2")]
    pub public_notice: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestAbstract {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub contest_id: u32,
    #[prost(string, tag = "3")]
    pub contest_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub state: u32,
    #[prost(uint32, tag = "5")]
    pub creator_id: u32,
    #[prost(uint32, tag = "6")]
    pub create_time: u32,
    #[prost(uint32, tag = "7")]
    pub start_time: u32,
    #[prost(uint32, tag = "8")]
    pub finish_time: u32,
    #[prost(bool, tag = "9")]
    pub open: bool,
    #[prost(string, tag = "10")]
    pub public_notice: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub contest_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestDetail {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub contest_id: u32,
    #[prost(string, tag = "3")]
    pub contest_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub state: u32,
    #[prost(uint32, tag = "5")]
    pub creator_id: u32,
    #[prost(uint32, tag = "6")]
    pub create_time: u32,
    #[prost(uint32, tag = "7")]
    pub start_time: u32,
    #[prost(uint32, tag = "8")]
    pub finish_time: u32,
    #[prost(bool, tag = "9")]
    pub open: bool,
    #[prost(uint32, tag = "10")]
    pub rank_rule: u32,
    #[prost(message, optional, tag = "11")]
    pub game_mode: ::core::option::Option<GameMode>,
    #[prost(string, tag = "12")]
    pub private_notice: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub observer_switch: u32,
    #[prost(uint32, tag = "14")]
    pub emoji_switch: u32,
    #[prost(uint32, tag = "15")]
    pub contest_type: u32,
    #[prost(uint32, tag = "16")]
    pub disable_broadcast: u32,
    #[prost(uint32, tag = "17")]
    pub signup_start_time: u32,
    #[prost(uint32, tag = "18")]
    pub signup_end_time: u32,
    #[prost(uint32, tag = "19")]
    pub signup_type: u32,
    #[prost(uint32, tag = "20")]
    pub auto_match: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestPlayerReport {
    #[prost(uint32, tag = "1")]
    pub rank_rule: u32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
    #[prost(int32, tag = "3")]
    pub point: i32,
    #[prost(uint32, repeated, tag = "4")]
    pub game_ranks: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub total_game_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordGame {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub start_time: u32,
    #[prost(uint32, tag = "3")]
    pub end_time: u32,
    #[prost(message, optional, tag = "5")]
    pub config: ::core::option::Option<GameConfig>,
    #[prost(message, repeated, tag = "11")]
    pub accounts: ::prost::alloc::vec::Vec<record_game::AccountInfo>,
    #[prost(message, optional, tag = "12")]
    pub result: ::core::option::Option<GameEndResult>,
}
/// Nested message and enum types in `RecordGame`.
pub mod record_game {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountInfo {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub seat: u32,
        #[prost(string, tag = "3")]
        pub nickname: ::prost::alloc::string::String,
        #[prost(uint32, tag = "4")]
        pub avatar_id: u32,
        #[prost(message, optional, tag = "5")]
        pub character: ::core::option::Option<super::Character>,
        #[prost(uint32, tag = "6")]
        pub title: u32,
        #[prost(message, optional, tag = "7")]
        pub level: ::core::option::Option<super::AccountLevel>,
        #[prost(message, optional, tag = "8")]
        pub level3: ::core::option::Option<super::AccountLevel>,
        #[prost(uint32, tag = "9")]
        pub avatar_frame: u32,
        #[prost(uint32, tag = "10")]
        pub verified: u32,
        #[prost(message, repeated, tag = "11")]
        pub views: ::prost::alloc::vec::Vec<super::ViewSlot>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestGameStart {
    #[prost(message, repeated, tag = "1")]
    pub players: ::prost::alloc::vec::Vec<customized_contest_game_start::Item>,
}
/// Nested message and enum types in `CustomizedContestGameStart`.
pub mod customized_contest_game_start {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(string, tag = "2")]
        pub nickname: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomizedContestGameEnd {
    #[prost(message, repeated, tag = "1")]
    pub players: ::prost::alloc::vec::Vec<customized_contest_game_end::Item>,
}
/// Nested message and enum types in `CustomizedContestGameEnd`.
pub mod customized_contest_game_end {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(string, tag = "2")]
        pub nickname: ::prost::alloc::string::String,
        #[prost(int32, tag = "3")]
        pub total_point: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Activity {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub start_time: u32,
    #[prost(uint32, tag = "3")]
    pub end_time: u32,
    #[prost(string, tag = "4")]
    pub r#type: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRecord {
    #[prost(uint32, tag = "1")]
    pub exchange_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityAccumulatedPointData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(int32, tag = "2")]
    pub point: i32,
    #[prost(uint32, repeated, tag = "3")]
    pub gained_reward_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityRankPointData {
    #[prost(uint32, tag = "1")]
    pub leaderboard_id: u32,
    #[prost(int32, tag = "2")]
    pub point: i32,
    #[prost(bool, tag = "3")]
    pub gained_reward: bool,
    #[prost(uint32, tag = "4")]
    pub gainable_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameRoundHuData {
    #[prost(message, optional, tag = "1")]
    pub hupai: ::core::option::Option<game_round_hu_data::HuPai>,
    #[prost(message, repeated, tag = "2")]
    pub fans: ::prost::alloc::vec::Vec<game_round_hu_data::Fan>,
    #[prost(uint32, tag = "3")]
    pub score: u32,
    #[prost(uint32, tag = "4")]
    pub xun: u32,
    #[prost(uint32, tag = "5")]
    pub title_id: u32,
    #[prost(uint32, tag = "6")]
    pub fan_sum: u32,
    #[prost(uint32, tag = "7")]
    pub fu_sum: u32,
    #[prost(uint32, tag = "8")]
    pub yakuman_count: u32,
    #[prost(uint32, tag = "9")]
    pub biao_dora_count: u32,
    #[prost(uint32, tag = "10")]
    pub red_dora_count: u32,
    #[prost(uint32, tag = "11")]
    pub li_dora_count: u32,
    #[prost(uint32, tag = "12")]
    pub babei_count: u32,
    #[prost(uint32, tag = "13")]
    pub xuan_shang_count: u32,
}
/// Nested message and enum types in `GameRoundHuData`.
pub mod game_round_hu_data {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct HuPai {
        #[prost(string, tag = "1")]
        pub tile: ::prost::alloc::string::String,
        #[prost(uint32, tag = "2")]
        pub seat: u32,
        #[prost(uint32, tag = "3")]
        pub liqi: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Fan {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
        #[prost(uint32, tag = "3")]
        pub fan: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameRoundPlayerResult {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, repeated, tag = "2")]
    pub hands: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub ming: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "4")]
    pub liqi_type: u32,
    #[prost(bool, tag = "5")]
    pub is_fulu: bool,
    #[prost(bool, tag = "6")]
    pub is_liujumanguan: bool,
    #[prost(uint32, tag = "7")]
    pub lian_zhuang: u32,
    #[prost(message, optional, tag = "8")]
    pub hu: ::core::option::Option<GameRoundHuData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameRoundPlayer {
    #[prost(int32, tag = "1")]
    pub score: i32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
    #[prost(message, optional, tag = "3")]
    pub result: ::core::option::Option<GameRoundPlayerResult>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameRoundSnapshot {
    #[prost(uint32, tag = "1")]
    pub ju: u32,
    #[prost(uint32, tag = "2")]
    pub ben: u32,
    #[prost(message, repeated, tag = "3")]
    pub players: ::prost::alloc::vec::Vec<GameRoundPlayer>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameFinalSnapshot {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub category: u32,
    #[prost(message, optional, tag = "4")]
    pub mode: ::core::option::Option<GameMode>,
    #[prost(message, optional, tag = "5")]
    pub meta: ::core::option::Option<GameMetaData>,
    #[prost(message, optional, tag = "6")]
    pub calculate_param: ::core::option::Option<game_final_snapshot::CalculateParam>,
    #[prost(uint32, tag = "7")]
    pub create_time: u32,
    #[prost(uint32, tag = "8")]
    pub start_time: u32,
    #[prost(uint32, tag = "9")]
    pub finish_time: u32,
    #[prost(message, repeated, tag = "10")]
    pub seats: ::prost::alloc::vec::Vec<game_final_snapshot::GameSeat>,
    #[prost(message, repeated, tag = "11")]
    pub rounds: ::prost::alloc::vec::Vec<GameRoundSnapshot>,
    #[prost(message, repeated, tag = "12")]
    pub account_views: ::prost::alloc::vec::Vec<PlayerGameView>,
    #[prost(message, repeated, tag = "13")]
    pub final_players: ::prost::alloc::vec::Vec<game_final_snapshot::FinalPlayer>,
    #[prost(message, repeated, tag = "14")]
    pub afk_info: ::prost::alloc::vec::Vec<game_final_snapshot::AfkInfo>,
}
/// Nested message and enum types in `GameFinalSnapshot`.
pub mod game_final_snapshot {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CalculateParam {
        #[prost(uint32, tag = "1")]
        pub init_point: u32,
        #[prost(uint32, tag = "2")]
        pub jingsuanyuandian: u32,
        #[prost(int32, repeated, tag = "3")]
        pub rank_points: ::prost::alloc::vec::Vec<i32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GameSeat {
        #[prost(uint32, tag = "1")]
        pub r#type: u32,
        #[prost(uint32, tag = "2")]
        pub account_id: u32,
        #[prost(message, optional, tag = "3")]
        pub notify_endpoint: ::core::option::Option<super::NetworkEndpoint>,
        #[prost(string, tag = "4")]
        pub client_address: ::prost::alloc::string::String,
        #[prost(bool, tag = "5")]
        pub is_connected: bool,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FinalPlayer {
        #[prost(uint32, tag = "1")]
        pub seat: u32,
        #[prost(int32, tag = "2")]
        pub total_point: i32,
        #[prost(int32, tag = "3")]
        pub part_point_1: i32,
        #[prost(int32, tag = "4")]
        pub part_point_2: i32,
        #[prost(int32, tag = "5")]
        pub grading_score: i32,
        #[prost(int32, tag = "6")]
        pub gold: i32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AfkInfo {
        #[prost(uint32, tag = "1")]
        pub deal_tile_count: u32,
        #[prost(uint32, tag = "2")]
        pub moqie_count: u32,
        #[prost(uint32, tag = "3")]
        pub seat: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordCollectedData {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub remarks: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start_time: u32,
    #[prost(uint32, tag = "4")]
    pub end_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContestDetailRule {
    #[prost(uint32, tag = "5")]
    pub init_point: u32,
    #[prost(uint32, tag = "6")]
    pub fandian: u32,
    #[prost(bool, tag = "7")]
    pub can_jifei: bool,
    #[prost(uint32, tag = "8")]
    pub tianbian_value: u32,
    #[prost(uint32, tag = "9")]
    pub liqibang_value: u32,
    #[prost(uint32, tag = "10")]
    pub changbang_value: u32,
    #[prost(uint32, tag = "11")]
    pub noting_fafu_1: u32,
    #[prost(uint32, tag = "12")]
    pub noting_fafu_2: u32,
    #[prost(uint32, tag = "13")]
    pub noting_fafu_3: u32,
    #[prost(bool, tag = "14")]
    pub have_liujumanguan: bool,
    #[prost(bool, tag = "15")]
    pub have_qieshangmanguan: bool,
    #[prost(bool, tag = "16")]
    pub have_biao_dora: bool,
    #[prost(bool, tag = "17")]
    pub have_gang_biao_dora: bool,
    #[prost(bool, tag = "18")]
    pub ming_dora_immediately_open: bool,
    #[prost(bool, tag = "19")]
    pub have_li_dora: bool,
    #[prost(bool, tag = "20")]
    pub have_gang_li_dora: bool,
    #[prost(bool, tag = "21")]
    pub have_sifenglianda: bool,
    #[prost(bool, tag = "22")]
    pub have_sigangsanle: bool,
    #[prost(bool, tag = "23")]
    pub have_sijializhi: bool,
    #[prost(bool, tag = "24")]
    pub have_jiuzhongjiupai: bool,
    #[prost(bool, tag = "25")]
    pub have_sanjiahele: bool,
    #[prost(bool, tag = "26")]
    pub have_toutiao: bool,
    #[prost(bool, tag = "27")]
    pub have_helelianzhuang: bool,
    #[prost(bool, tag = "28")]
    pub have_helezhongju: bool,
    #[prost(bool, tag = "29")]
    pub have_tingpailianzhuang: bool,
    #[prost(bool, tag = "30")]
    pub have_tingpaizhongju: bool,
    #[prost(bool, tag = "31")]
    pub have_yifa: bool,
    #[prost(bool, tag = "32")]
    pub have_nanruxiru: bool,
    #[prost(uint32, tag = "33")]
    pub jingsuanyuandian: u32,
    #[prost(int32, tag = "34")]
    pub shunweima_2: i32,
    #[prost(int32, tag = "35")]
    pub shunweima_3: i32,
    #[prost(int32, tag = "36")]
    pub shunweima_4: i32,
    #[prost(bool, tag = "37")]
    pub bianjietishi: bool,
    #[prost(uint32, tag = "38")]
    pub ai_level: u32,
    #[prost(bool, tag = "39")]
    pub have_zimosun: bool,
    #[prost(bool, tag = "40")]
    pub disable_multi_yukaman: bool,
    #[prost(uint32, tag = "41")]
    pub guyi_mode: u32,
    #[prost(bool, tag = "42")]
    pub disable_leijiyiman: bool,
    #[prost(uint32, tag = "43")]
    pub dora3_mode: u32,
    #[prost(uint32, tag = "44")]
    pub xuezhandaodi: u32,
    #[prost(uint32, tag = "45")]
    pub huansanzhang: u32,
    #[prost(uint32, tag = "46")]
    pub chuanma: u32,
    #[prost(uint32, tag = "62")]
    pub disable_double_yakuman: u32,
    #[prost(uint32, tag = "63")]
    pub disable_composite_yakuman: u32,
    #[prost(uint32, tag = "64")]
    pub enable_shiti: u32,
    #[prost(uint32, tag = "65")]
    pub enable_nontsumo_liqi: u32,
    #[prost(uint32, tag = "66")]
    pub disable_double_wind_four_fu: u32,
    #[prost(uint32, tag = "67")]
    pub disable_angang_guoshi: u32,
    #[prost(uint32, tag = "68")]
    pub enable_renhe: u32,
    #[prost(uint32, tag = "69")]
    pub enable_baopai_extend_settings: u32,
    #[prost(uint32, tag = "70")]
    pub fanfu: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContestDetailRuleV2 {
    #[prost(message, optional, tag = "1")]
    pub game_rule: ::core::option::Option<ContestDetailRule>,
    #[prost(message, optional, tag = "2")]
    pub extra_rule: ::core::option::Option<contest_detail_rule_v2::ExtraRule>,
}
/// Nested message and enum types in `ContestDetailRuleV2`.
pub mod contest_detail_rule_v2 {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ExtraRule {
        #[prost(uint32, tag = "1")]
        pub required_level: u32,
        #[prost(uint32, tag = "2")]
        pub max_game_count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameRuleSetting {
    #[prost(uint32, tag = "1")]
    pub round_type: u32,
    #[prost(bool, tag = "2")]
    pub shiduan: bool,
    #[prost(uint32, tag = "3")]
    pub dora_count: u32,
    #[prost(uint32, tag = "4")]
    pub thinking_type: u32,
    #[prost(bool, tag = "5")]
    pub use_detail_rule: bool,
    #[prost(message, optional, tag = "6")]
    pub detail_rule_v2: ::core::option::Option<ContestDetailRuleV2>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordTingPaiInfo {
    #[prost(string, tag = "1")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub haveyi: bool,
    #[prost(bool, tag = "3")]
    pub yiman: bool,
    #[prost(uint32, tag = "4")]
    pub count: u32,
    #[prost(uint32, tag = "5")]
    pub fu: u32,
    #[prost(uint32, tag = "6")]
    pub biao_dora_count: u32,
    #[prost(bool, tag = "7")]
    pub yiman_zimo: bool,
    #[prost(uint32, tag = "8")]
    pub count_zimo: u32,
    #[prost(uint32, tag = "9")]
    pub fu_zimo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordNoTilePlayerInfo {
    #[prost(bool, tag = "3")]
    pub tingpai: bool,
    #[prost(string, repeated, tag = "4")]
    pub hand: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "5")]
    pub tings: ::prost::alloc::vec::Vec<RecordTingPaiInfo>,
    #[prost(bool, tag = "6")]
    pub liuman: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordHuleInfo {
    #[prost(string, repeated, tag = "1")]
    pub hand: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub ming: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub hu_tile: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub seat: u32,
    #[prost(bool, tag = "5")]
    pub zimo: bool,
    #[prost(bool, tag = "6")]
    pub qinjia: bool,
    #[prost(bool, tag = "7")]
    pub liqi: bool,
    #[prost(string, repeated, tag = "8")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub li_doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "10")]
    pub yiman: bool,
    #[prost(uint32, tag = "11")]
    pub count: u32,
    #[prost(message, repeated, tag = "12")]
    pub fans: ::prost::alloc::vec::Vec<record_hule_info::RecordFanInfo>,
    #[prost(uint32, tag = "13")]
    pub fu: u32,
    #[prost(uint32, tag = "14")]
    pub point_zimo_qin: u32,
    #[prost(uint32, tag = "15")]
    pub point_zimo_xian: u32,
    #[prost(uint32, tag = "16")]
    pub title_id: u32,
    #[prost(uint32, tag = "17")]
    pub point_sum: u32,
    #[prost(uint32, tag = "18")]
    pub dadian: u32,
    #[prost(bool, tag = "19")]
    pub is_jue_zhang: bool,
    #[prost(uint32, tag = "20")]
    pub xun: u32,
    #[prost(uint32, tag = "21")]
    pub ting_type: u32,
    #[prost(uint32, tag = "22")]
    pub ting_mian: u32,
}
/// Nested message and enum types in `RecordHuleInfo`.
pub mod record_hule_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RecordFanInfo {
        #[prost(uint32, tag = "1")]
        pub val: u32,
        #[prost(uint32, tag = "2")]
        pub id: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordHulesInfo {
    #[prost(int32, tag = "1")]
    pub seat: i32,
    #[prost(message, repeated, tag = "2")]
    pub hules: ::prost::alloc::vec::Vec<RecordHuleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordLiujuInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordNoTileInfo {
    #[prost(bool, tag = "1")]
    pub liujumanguan: bool,
    #[prost(message, repeated, tag = "2")]
    pub players: ::prost::alloc::vec::Vec<RecordNoTilePlayerInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordLiqiInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub score: u32,
    #[prost(bool, tag = "3")]
    pub is_w: bool,
    #[prost(bool, tag = "4")]
    pub is_zhen_ting: bool,
    #[prost(uint32, tag = "5")]
    pub xun: u32,
    #[prost(bool, tag = "6")]
    pub is_success: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordGangInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, tag = "3")]
    pub pai: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub is_dora: bool,
    #[prost(uint32, tag = "5")]
    pub xun: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordBaBeiInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(bool, tag = "2")]
    pub is_zi_mo: bool,
    #[prost(bool, tag = "3")]
    pub is_chong: bool,
    #[prost(bool, tag = "4")]
    pub is_bei: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordPeiPaiInfo {
    #[prost(uint32, tag = "1")]
    pub dora_count: u32,
    #[prost(uint32, tag = "2")]
    pub r_dora_count: u32,
    #[prost(uint32, tag = "3")]
    pub bei_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordRoundInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub chang: u32,
    #[prost(uint32, tag = "3")]
    pub ju: u32,
    #[prost(uint32, tag = "4")]
    pub ben: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub liqi_infos: ::prost::alloc::vec::Vec<RecordLiqiInfo>,
    #[prost(message, repeated, tag = "8")]
    pub gang_infos: ::prost::alloc::vec::Vec<RecordGangInfo>,
    #[prost(message, repeated, tag = "9")]
    pub peipai_infos: ::prost::alloc::vec::Vec<RecordPeiPaiInfo>,
    #[prost(message, repeated, tag = "10")]
    pub babai_infos: ::prost::alloc::vec::Vec<RecordBaBeiInfo>,
    #[prost(message, optional, tag = "11")]
    pub hules_info: ::core::option::Option<RecordHulesInfo>,
    #[prost(message, optional, tag = "12")]
    pub liuju_info: ::core::option::Option<RecordLiujuInfo>,
    #[prost(message, optional, tag = "13")]
    pub no_tile_info: ::core::option::Option<RecordNoTileInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordAnalysisedData {
    #[prost(message, repeated, tag = "1")]
    pub round_infos: ::prost::alloc::vec::Vec<RecordRoundInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VoteData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub vote: u32,
    #[prost(uint32, tag = "3")]
    pub count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityBuffData {
    #[prost(uint32, tag = "1")]
    pub buff_id: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountResourceSnapshot {
    #[prost(message, repeated, tag = "1")]
    pub bag_item: ::prost::alloc::vec::Vec<account_resource_snapshot::BagItemSnapshot>,
    #[prost(message, repeated, tag = "2")]
    pub currency: ::prost::alloc::vec::Vec<account_resource_snapshot::CurrencySnapshot>,
    #[prost(message, optional, tag = "3")]
    pub title: ::core::option::Option<account_resource_snapshot::TitleSnapshot>,
    #[prost(message, optional, tag = "4")]
    pub used_title: ::core::option::Option<account_resource_snapshot::UsedTitleSnapshot>,
    #[prost(uint32, tag = "5")]
    pub currency_convert: u32,
}
/// Nested message and enum types in `AccountResourceSnapshot`.
pub mod account_resource_snapshot {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct BagItemSnapshot {
        #[prost(uint32, tag = "1")]
        pub resource_id: u32,
        #[prost(uint32, tag = "2")]
        pub resource_count: u32,
        #[prost(uint32, tag = "3")]
        pub resource_version: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CurrencySnapshot {
        #[prost(uint32, tag = "1")]
        pub currency_id: u32,
        #[prost(uint32, tag = "2")]
        pub currency_count: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TitleSnapshot {
        #[prost(uint32, repeated, tag = "1")]
        pub title_list: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct UsedTitleSnapshot {
        #[prost(uint32, tag = "1")]
        pub title_id: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountCharacterSnapshot {
    #[prost(uint32, repeated, tag = "1")]
    pub created_characters: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub removed_characters: ::prost::alloc::vec::Vec<Character>,
    #[prost(message, repeated, tag = "3")]
    pub modified_characters: ::prost::alloc::vec::Vec<Character>,
    #[prost(message, optional, tag = "4")]
    pub main_character: ::core::option::Option<account_character_snapshot::MainCharacterSnapshot>,
    #[prost(message, optional, tag = "5")]
    pub skins: ::core::option::Option<account_character_snapshot::SkinsSnapshot>,
    #[prost(message, optional, tag = "6")]
    pub hidden_characters: ::core::option::Option<account_character_snapshot::HiddenCharacter>,
}
/// Nested message and enum types in `AccountCharacterSnapshot`.
pub mod account_character_snapshot {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MainCharacterSnapshot {
        #[prost(uint32, tag = "1")]
        pub character_id: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SkinsSnapshot {
        #[prost(uint32, repeated, tag = "1")]
        pub skin_list: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct HiddenCharacter {
        #[prost(uint32, repeated, tag = "1")]
        pub hidden_list: ::prost::alloc::vec::Vec<u32>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountMailRecord {
    #[prost(uint32, repeated, tag = "1")]
    pub created_mails: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub removed_mails: ::prost::alloc::vec::Vec<account_mail_record::MailSnapshot>,
    #[prost(message, repeated, tag = "3")]
    pub modified_mails: ::prost::alloc::vec::Vec<account_mail_record::MailSnapshot>,
}
/// Nested message and enum types in `AccountMailRecord`.
pub mod account_mail_record {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MailSnapshot {
        #[prost(uint32, tag = "1")]
        pub mail_id: u32,
        #[prost(uint32, tag = "2")]
        pub reference_id: u32,
        #[prost(uint32, tag = "3")]
        pub create_time: u32,
        #[prost(uint32, tag = "4")]
        pub expire_time: u32,
        #[prost(uint32, tag = "5")]
        pub take_attachment: u32,
        #[prost(message, repeated, tag = "6")]
        pub attachments: ::prost::alloc::vec::Vec<super::RewardSlot>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountAchievementSnapshot {
    #[prost(message, repeated, tag = "1")]
    pub achievements: ::prost::alloc::vec::Vec<AchievementProgress>,
    #[prost(message, optional, tag = "2")]
    pub rewarded_group: ::core::option::Option<account_achievement_snapshot::RewardedGroupSnapshot>,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<account_achievement_snapshot::AchievementVersion>,
}
/// Nested message and enum types in `AccountAchievementSnapshot`.
pub mod account_achievement_snapshot {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardedGroupSnapshot {
        #[prost(uint32, tag = "1")]
        pub rewarded_id: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AchievementVersion {
        #[prost(uint32, tag = "1")]
        pub version: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountMiscSnapshot {
    #[prost(message, optional, tag = "1")]
    pub faith_data: ::core::option::Option<FaithData>,
    #[prost(message, optional, tag = "2")]
    pub vip_reward_gained: ::core::option::Option<account_misc_snapshot::AccountVipRewardSnapshot>,
    #[prost(message, optional, tag = "3")]
    pub vip: ::core::option::Option<account_misc_snapshot::AccountVip>,
    #[prost(message, optional, tag = "4")]
    pub shop_info: ::core::option::Option<ShopInfo>,
    #[prost(message, optional, tag = "5")]
    pub month_ticket: ::core::option::Option<account_misc_snapshot::AccountMonthTicketSnapshot>,
    #[prost(message, optional, tag = "6")]
    pub recharged: ::core::option::Option<account_misc_snapshot::AccountRechargeInfo>,
    #[prost(message, optional, tag = "7")]
    pub month_ticket_v2:
        ::core::option::Option<account_misc_snapshot::AccountMonthTicketSnapshotV2>,
}
/// Nested message and enum types in `AccountMiscSnapshot`.
pub mod account_misc_snapshot {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountVipRewardSnapshot {
        #[prost(uint32, repeated, tag = "1")]
        pub rewarded: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MonthTicketInfo {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub end_time: u32,
        #[prost(uint32, tag = "3")]
        pub last_pay_time: u32,
        #[prost(uint32, tag = "4")]
        pub record_start_time: u32,
        #[prost(uint32, repeated, tag = "5")]
        pub history: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountMonthTicketSnapshot {
        #[prost(message, repeated, tag = "1")]
        pub tickets: ::prost::alloc::vec::Vec<MonthTicketInfo>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AccountVip {
        #[prost(uint32, tag = "1")]
        pub vip: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountRechargeInfo {
        #[prost(message, repeated, tag = "1")]
        pub records: ::prost::alloc::vec::Vec<account_recharge_info::RechargeRecord>,
        #[prost(uint32, tag = "2")]
        pub has_data: u32,
    }
    /// Nested message and enum types in `AccountRechargeInfo`.
    pub mod account_recharge_info {
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct RechargeRecord {
            #[prost(uint32, tag = "1")]
            pub level: u32,
            #[prost(uint32, tag = "2")]
            pub recharge_time: u32,
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountMonthTicketSnapshotV2 {
        #[prost(uint32, tag = "1")]
        pub end_time: u32,
        #[prost(uint32, tag = "2")]
        pub last_pay_time: u32,
        #[prost(uint32, tag = "3")]
        pub record_start_time: u32,
        #[prost(uint32, repeated, tag = "4")]
        pub history: ::prost::alloc::vec::Vec<u32>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountGiftCodeRecord {
    #[prost(string, repeated, tag = "1")]
    pub used_gift_code: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccSn {
    #[prost(message, optional, tag = "1")]
    pub resource: ::core::option::Option<AccountResourceSnapshot>,
    #[prost(message, optional, tag = "2")]
    pub character: ::core::option::Option<AccountCharacterSnapshot>,
    #[prost(message, optional, tag = "3")]
    pub mail: ::core::option::Option<AccountMailRecord>,
    #[prost(message, optional, tag = "4")]
    pub achievement: ::core::option::Option<AccountAchievementSnapshot>,
    #[prost(message, optional, tag = "5")]
    pub misc: ::core::option::Option<AccountMiscSnapshot>,
    #[prost(message, optional, tag = "6")]
    pub gift_code: ::core::option::Option<AccountGiftCodeRecord>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccSnDa {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(uint32, tag = "2")]
    pub time: u32,
    #[prost(bytes = "vec", tag = "3")]
    pub snapshot: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransparentData {
    #[prost(string, tag = "1")]
    pub method: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub session: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub remote: ::core::option::Option<NetworkEndpoint>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResConnectionInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub client_endpoint: ::core::option::Option<NetworkEndpoint>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchQueueInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub remain: u32,
    #[prost(uint32, tag = "3")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqOpenidCheck {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSignupAccount {
    #[prost(string, tag = "1")]
    pub account: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub code: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub r#type: u32,
    #[prost(message, optional, tag = "5")]
    pub device: ::core::option::Option<ClientDeviceInfo>,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSignupAccount {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqLogin {
    #[prost(string, tag = "1")]
    pub account: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub reconnect: bool,
    #[prost(message, optional, tag = "4")]
    pub device: ::core::option::Option<ClientDeviceInfo>,
    #[prost(string, tag = "5")]
    pub random_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub client_version: ::core::option::Option<ClientVersionInfo>,
    #[prost(bool, tag = "7")]
    pub gen_access_token: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub currency_platforms: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub r#type: u32,
    #[prost(uint32, tag = "10")]
    pub version: u32,
    #[prost(string, tag = "11")]
    pub client_version_string: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResLogin {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
    #[prost(message, optional, tag = "3")]
    pub account: ::core::option::Option<Account>,
    #[prost(message, optional, tag = "4")]
    pub game_info: ::core::option::Option<GameConnectInfo>,
    #[prost(bool, tag = "5")]
    pub has_unread_announcement: bool,
    #[prost(string, tag = "6")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub signup_time: u32,
    #[prost(bool, tag = "8")]
    pub is_id_card_authed: bool,
    #[prost(string, tag = "9")]
    pub country: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "10")]
    pub logined_version: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub rewarded_version: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqEmailLogin {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub reconnect: bool,
    #[prost(message, optional, tag = "4")]
    pub device: ::core::option::Option<ClientDeviceInfo>,
    #[prost(string, tag = "5")]
    pub random_key: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub gen_access_token: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub currency_platforms: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqBindAccount {
    #[prost(string, tag = "1")]
    pub account: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreatePhoneVerifyCode {
    #[prost(string, tag = "1")]
    pub phone: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub usage: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateEmailVerifyCode {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub usage: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqVerifyCodeForSecure {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub operation: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResVerfiyCodeForSecure {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub secure_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqBindPhoneNumber {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub phone: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub password: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub multi_bind_version: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqUnbindPhoneNumber {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub phone: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchPhoneLoginBind {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub phone_login: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreatePhoneLoginBind {
    #[prost(string, tag = "1")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqBindEmail {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqModifyPassword {
    #[prost(string, tag = "1")]
    pub new_password: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub old_password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub secure_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqOauth2Auth {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOauth2Auth {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub access_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqOauth2Check {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, tag = "2")]
    pub access_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOauth2Check {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(bool, tag = "2")]
    pub has_account: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqOauth2Signup {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, tag = "2")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub advertise_str: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub device: ::core::option::Option<ClientDeviceInfo>,
    #[prost(message, optional, tag = "6")]
    pub client_version: ::core::option::Option<ClientVersionInfo>,
    #[prost(string, tag = "7")]
    pub client_version_string: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOauth2Signup {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqOauth2Login {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, tag = "2")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub reconnect: bool,
    #[prost(message, optional, tag = "4")]
    pub device: ::core::option::Option<ClientDeviceInfo>,
    #[prost(string, tag = "5")]
    pub random_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub client_version: ::core::option::Option<ClientVersionInfo>,
    #[prost(bool, tag = "7")]
    pub gen_access_token: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub currency_platforms: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub version: u32,
    #[prost(string, tag = "10")]
    pub client_version_string: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqDmmPreLogin {
    #[prost(string, tag = "1")]
    pub finish_url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResDmmPreLogin {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "1")]
    pub parameter: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqLogout {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResLogout {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqHeatBeat {
    #[prost(uint32, tag = "1")]
    pub no_operation_counter: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqLoginBeat {
    #[prost(string, tag = "1")]
    pub contract: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqJoinMatchQueue {
    #[prost(uint32, tag = "1")]
    pub match_mode: u32,
    #[prost(string, tag = "2")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCancelMatchQueue {
    #[prost(uint32, tag = "1")]
    pub match_mode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqAccountInfo {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub account: ::core::option::Option<Account>,
    #[prost(message, optional, tag = "3")]
    pub room: ::core::option::Option<Room>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateNickname {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub advertise_str: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub tag: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqModifyNickname {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub use_item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqModifyBirthday {
    #[prost(int32, tag = "1")]
    pub birthday: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSelfRoom {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub room: ::core::option::Option<Room>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchGamingInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub game_info: ::core::option::Option<GameConnectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateRoom {
    #[prost(uint32, tag = "1")]
    pub player_count: u32,
    #[prost(message, optional, tag = "2")]
    pub mode: ::core::option::Option<GameMode>,
    #[prost(bool, tag = "3")]
    pub public_live: bool,
    #[prost(string, tag = "4")]
    pub client_version_string: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub pre_rule: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateRoom {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub room: ::core::option::Option<Room>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqJoinRoom {
    #[prost(uint32, tag = "1")]
    pub room_id: u32,
    #[prost(string, tag = "2")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResJoinRoom {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub room: ::core::option::Option<Room>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRoomReady {
    #[prost(bool, tag = "1")]
    pub ready: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRoomDressing {
    #[prost(bool, tag = "1")]
    pub dressing: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRoomStart {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRoomKick {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqModifyRoom {
    #[prost(uint32, tag = "1")]
    pub robot_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChangeAvatar {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqAccountStatisticInfo {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountStatisticInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub statistic_data: ::prost::alloc::vec::Vec<AccountStatisticData>,
    #[prost(message, optional, tag = "3")]
    pub detail_data: ::core::option::Option<AccountDetailStatisticV2>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountChallengeRankInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub season_info: ::prost::alloc::vec::Vec<res_account_challenge_rank_info::ChallengeRank>,
}
/// Nested message and enum types in `ResAccountChallengeRankInfo`.
pub mod res_account_challenge_rank_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ChallengeRank {
        #[prost(uint32, tag = "1")]
        pub season: u32,
        #[prost(uint32, tag = "2")]
        pub rank: u32,
        #[prost(uint32, tag = "3")]
        pub level: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountCharacterInfo {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "1")]
    pub unlock_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqShopPurchase {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResShopPurchase {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub update: ::core::option::Option<AccountUpdate>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGameRecord {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameRecord {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "3")]
    pub head: ::core::option::Option<RecordGame>,
    #[prost(bytes = "vec", tag = "4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "5")]
    pub data_url: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGameRecordList {
    #[prost(uint32, tag = "1")]
    pub start: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(uint32, tag = "3")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameRecordList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub total_count: u32,
    #[prost(message, repeated, tag = "3")]
    pub record_list: ::prost::alloc::vec::Vec<RecordGame>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCollectedGameRecordList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub record_list: ::prost::alloc::vec::Vec<RecordCollectedData>,
    #[prost(uint32, tag = "3")]
    pub record_collect_limit: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGameRecordsDetail {
    #[prost(string, repeated, tag = "1")]
    pub uuid_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameRecordsDetail {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub record_list: ::prost::alloc::vec::Vec<RecordGame>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqAddCollectedGameRecord {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub remarks: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub start_time: u32,
    #[prost(uint32, tag = "4")]
    pub end_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAddCollectedGameRecord {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqRemoveCollectedGameRecord {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRemoveCollectedGameRecord {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqChangeCollectedGameRecordRemarks {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub remarks: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResChangeCollectedGameRecordRemarks {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqLevelLeaderboard {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResLevelLeaderboard {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_level_leaderboard::Item>,
    #[prost(uint32, tag = "3")]
    pub self_rank: u32,
}
/// Nested message and enum types in `ResLevelLeaderboard`.
pub mod res_level_leaderboard {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(message, optional, tag = "2")]
        pub level: ::core::option::Option<super::AccountLevel>,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChallangeLeaderboard {
    #[prost(uint32, tag = "1")]
    pub season: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResChallengeLeaderboard {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_challenge_leaderboard::Item>,
    #[prost(uint32, tag = "3")]
    pub self_rank: u32,
}
/// Nested message and enum types in `ResChallengeLeaderboard`.
pub mod res_challenge_leaderboard {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub level: u32,
        #[prost(string, tag = "3")]
        pub nickname: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqMutiChallengeLevel {
    #[prost(uint32, repeated, tag = "1")]
    pub account_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub season: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResMutiChallengeLevel {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_muti_challenge_level::Item>,
}
/// Nested message and enum types in `ResMutiChallengeLevel`.
pub mod res_muti_challenge_level {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub level: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqMultiAccountId {
    #[prost(uint32, repeated, tag = "1")]
    pub account_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResMultiAccountBrief {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub players: ::prost::alloc::vec::Vec<PlayerBaseView>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFriendList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub friends: ::prost::alloc::vec::Vec<Friend>,
    #[prost(uint32, tag = "3")]
    pub friend_max_count: u32,
    #[prost(uint32, tag = "4")]
    pub friend_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFriendApplyList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub applies: ::prost::alloc::vec::Vec<res_friend_apply_list::FriendApply>,
}
/// Nested message and enum types in `ResFriendApplyList`.
pub mod res_friend_apply_list {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FriendApply {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub apply_time: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqApplyFriend {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqHandleFriendApply {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(uint32, tag = "2")]
    pub method: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRemoveFriend {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSearchAccountByPattern {
    #[prost(bool, tag = "1")]
    pub search_next: bool,
    #[prost(string, tag = "2")]
    pub pattern: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSearchAccountByPattern {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(bool, tag = "2")]
    pub is_finished: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub match_accounts: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub decode_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqAccountList {
    #[prost(uint32, repeated, tag = "1")]
    pub account_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountStates {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub states: ::prost::alloc::vec::Vec<AccountActiveState>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqSearchAccountById {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSearchAccountById {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub player: ::core::option::Option<PlayerBaseView>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResBagInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub bag: ::core::option::Option<Bag>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUseBagItem {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqOpenManualItem {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(uint32, tag = "3")]
    pub select_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqOpenRandomRewardItem {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOpenRandomRewardItem {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<OpenResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqOpenAllRewardItem {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOpenAllRewardItem {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<OpenResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqComposeShard {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchAnnouncement {
    #[prost(string, tag = "1")]
    pub lang: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub platform: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAnnouncement {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub announcements: ::prost::alloc::vec::Vec<Announcement>,
    #[prost(uint32, repeated, tag = "3")]
    pub sort: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub read_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResMailInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub mails: ::prost::alloc::vec::Vec<Mail>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReadMail {
    #[prost(uint32, tag = "1")]
    pub mail_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqDeleteMail {
    #[prost(uint32, tag = "1")]
    pub mail_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqTakeAttachment {
    #[prost(uint32, tag = "1")]
    pub mail_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveAchievementGroupReward {
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveAchievementGroupReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub execute_reward: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveAchievementReward {
    #[prost(uint32, tag = "1")]
    pub achievement_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveAchievementReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub execute_reward: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchAchievementRate {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "1")]
    pub rate: ::prost::alloc::vec::Vec<res_fetch_achievement_rate::AchievementRate>,
}
/// Nested message and enum types in `ResFetchAchievementRate`.
pub mod res_fetch_achievement_rate {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AchievementRate {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub rate: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAchievement {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub progresses: ::prost::alloc::vec::Vec<AchievementProgress>,
    #[prost(uint32, repeated, tag = "3")]
    pub rewarded_group: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResTitleList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub title_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUseTitle {
    #[prost(uint32, tag = "1")]
    pub title: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqBuyShiLian {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpdateClientValue {
    #[prost(uint32, tag = "1")]
    pub key: u32,
    #[prost(uint32, tag = "2")]
    pub value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResClientValue {
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "1")]
    pub datas: ::prost::alloc::vec::Vec<res_client_value::Value>,
    #[prost(uint32, tag = "2")]
    pub recharged_count: u32,
}
/// Nested message and enum types in `ResClientValue`.
pub mod res_client_value {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Value {
        #[prost(uint32, tag = "1")]
        pub key: u32,
        #[prost(uint32, tag = "2")]
        pub value: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqClientMessage {
    #[prost(uint32, tag = "1")]
    pub timestamp: u32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCurrentMatchInfo {
    #[prost(uint32, repeated, tag = "1")]
    pub mode_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCurrentMatchInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub matches: ::prost::alloc::vec::Vec<res_current_match_info::CurrentMatchInfo>,
}
/// Nested message and enum types in `ResCurrentMatchInfo`.
pub mod res_current_match_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CurrentMatchInfo {
        #[prost(uint32, tag = "1")]
        pub mode_id: u32,
        #[prost(uint32, tag = "2")]
        pub playing_count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUserComplain {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqReadAnnouncement {
    #[prost(uint32, tag = "1")]
    pub announcement_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub announcement_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReviveCoinInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(bool, tag = "2")]
    pub has_gained: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResDailyTask {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub progresses: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(bool, tag = "3")]
    pub has_refresh_count: bool,
    #[prost(uint32, tag = "4")]
    pub max_daily_task_count: u32,
    #[prost(uint32, tag = "5")]
    pub refresh_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRefreshDailyTask {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRefreshDailyTask {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub progress: ::core::option::Option<TaskProgress>,
    #[prost(uint32, tag = "3")]
    pub refresh_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqUseGiftCode {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResUseGiftCode {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "6")]
    pub rewards: ::prost::alloc::vec::Vec<RewardSlot>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResUseSpecialGiftCode {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSendClientMessage {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGameLiveInfo {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameLiveInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub left_start_seconds: u32,
    #[prost(message, optional, tag = "3")]
    pub live_head: ::core::option::Option<GameLiveHead>,
    #[prost(message, repeated, tag = "4")]
    pub segments: ::prost::alloc::vec::Vec<GameLiveSegmentUri>,
    #[prost(uint32, tag = "5")]
    pub now_millisecond: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGameLiveLeftSegment {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub last_segment_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameLiveLeftSegment {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub live_state: u32,
    #[prost(message, repeated, tag = "4")]
    pub segments: ::prost::alloc::vec::Vec<GameLiveSegmentUri>,
    #[prost(uint32, tag = "5")]
    pub now_millisecond: u32,
    #[prost(uint32, tag = "6")]
    pub segment_end_millisecond: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGameLiveList {
    #[prost(uint32, tag = "1")]
    pub filter_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameLiveList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub live_list: ::prost::alloc::vec::Vec<GameLiveHead>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCommentSetting {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub comment_allow: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpdateCommentSetting {
    #[prost(uint32, tag = "1")]
    pub comment_allow: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchCommentList {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCommentList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub comment_allow: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub comment_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub last_read_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchCommentContent {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub comment_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCommentContent {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub comments: ::prost::alloc::vec::Vec<CommentItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqLeaveComment {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqDeleteComment {
    #[prost(uint32, tag = "1")]
    pub target_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub delete_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpdateReadComment {
    #[prost(uint32, tag = "1")]
    pub read_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqRollingNotice {
    #[prost(message, repeated, tag = "1")]
    pub notice: ::prost::alloc::vec::Vec<RollingNotice>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResServerTime {
    #[prost(uint32, tag = "1")]
    pub server_time: u32,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqPlatformBillingProducts {
    #[prost(uint32, tag = "1")]
    pub shelves_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResPlatformBillingProducts {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub products: ::prost::alloc::vec::Vec<BillingProduct>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateBillingOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub payment_platform: u32,
    #[prost(uint32, tag = "3")]
    pub client_type: u32,
    #[prost(uint32, tag = "4")]
    pub account_id: u32,
    #[prost(string, tag = "5")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateBillingOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSolveGooglePlayOrder {
    #[prost(string, tag = "2")]
    pub inapp_purchase_data: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub inapp_data_signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSolveGooglePlayOrderV3 {
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub transaction_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCancelGooglePlayOrder {
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateWechatNativeOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub account_ip: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateWechatNativeOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub qrcode_buffer: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateWechatAppOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub account_ip: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateWechatAppOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub call_wechat_app_param:
        ::core::option::Option<res_create_wechat_app_order::CallWechatAppParam>,
}
/// Nested message and enum types in `ResCreateWechatAppOrder`.
pub mod res_create_wechat_app_order {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CallWechatAppParam {
        #[prost(string, tag = "1")]
        pub appid: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub partnerid: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub prepayid: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub package: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub noncestr: ::prost::alloc::string::String,
        #[prost(string, tag = "6")]
        pub timestamp: ::prost::alloc::string::String,
        #[prost(string, tag = "7")]
        pub sign: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateAlipayOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub alipay_trade_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateAlipayOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub alipay_url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateAlipayScanOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateAlipayScanOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub qrcode_buffer: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub qr_code: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateAlipayAppOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateAlipayAppOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub alipay_url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpCreditCardOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpCreditCardOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpPaypalOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpPaypalOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpAuOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpAuOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpDocomoOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpDocomoOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpWebMoneyOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpWebMoneyOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpSoftbankOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpSoftbankOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpPayPayOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpPayPayOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchJpCommonCreditCardOrder {
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchJpCommonCreditCardOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateJpgmoOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateJpgmoOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateYostarOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(uint32, tag = "4")]
    pub order_type: u32,
    #[prost(string, tag = "5")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateYostarOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateEnPaypalOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateEnPaypalOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateEnjcbOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateEnjcbOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateEnMasterCardOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateEnMasterCardOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateEnVisaOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateEnVisaOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateEnAlipayOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateEnAlipayOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateKrPaypalOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateKrPaypalOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateKrjcbOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateKrjcbOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateKrMasterCardOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateKrMasterCardOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateKrVisaOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateKrVisaOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateKrAlipayOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub return_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateKrAlipayOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateDmmOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
    #[prost(uint32, tag = "3")]
    pub client_type: u32,
    #[prost(string, tag = "4")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateDmmOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transaction_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub dmm_user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub callback_url: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub request_time: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub dmm_app_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateIapOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub access_token: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub debt_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateIapOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqVerificationIapOrder {
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub transaction_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub receipt_data: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResVerificationIapOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateSteamOrder {
    #[prost(string, tag = "1")]
    pub language: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
    #[prost(uint32, tag = "3")]
    pub client_type: u32,
    #[prost(uint32, tag = "4")]
    pub goods_id: u32,
    #[prost(string, tag = "5")]
    pub steam_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub debt_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateSteamOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub platform_order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqVerifySteamOrder {
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateMyCardOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub debt_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateMyCardOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub auth_code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub order_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqVerifyMyCardOrder {
    #[prost(string, tag = "1")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub account_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreatePaypalOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(string, tag = "4")]
    pub debt_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreatePaypalOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateXsollaOrder {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub client_type: u32,
    #[prost(uint32, tag = "3")]
    pub account_id: u32,
    #[prost(uint32, tag = "4")]
    pub payment_method: u32,
    #[prost(string, tag = "5")]
    pub debt_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateXsollaOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqDeliverAa32Order {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(string, tag = "2")]
    pub nsa_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub nsa_token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqOpenChest {
    #[prost(uint32, tag = "1")]
    pub chest_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(bool, tag = "3")]
    pub use_ticket: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOpenChest {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<OpenResult>,
    #[prost(uint32, tag = "3")]
    pub total_open_count: u32,
    #[prost(uint32, tag = "4")]
    pub faith_count: u32,
    #[prost(message, repeated, tag = "5")]
    pub chest_replace_up: ::prost::alloc::vec::Vec<res_open_chest::ChestReplaceCountData>,
}
/// Nested message and enum types in `ResOpenChest`.
pub mod res_open_chest {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ChestReplaceCountData {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqBuyFromChestShop {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResBuyFromChestShop {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub chest_id: u32,
    #[prost(uint32, tag = "3")]
    pub consume_count: u32,
    #[prost(int32, tag = "4")]
    pub faith_count: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResDailySignInInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub sign_in_days: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqDoActivitySignIn {
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResDoActivitySignIn {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<res_do_activity_sign_in::RewardData>,
    #[prost(uint32, tag = "3")]
    pub sign_in_count: u32,
}
/// Nested message and enum types in `ResDoActivitySignIn`.
pub mod res_do_activity_sign_in {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardData {
        #[prost(uint32, tag = "1")]
        pub resource_id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCharacterInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub characters: ::prost::alloc::vec::Vec<Character>,
    #[prost(uint32, repeated, tag = "3")]
    pub skins: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub main_character_id: u32,
    #[prost(uint32, tag = "5")]
    pub send_gift_count: u32,
    #[prost(uint32, tag = "6")]
    pub send_gift_limit: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub finished_endings: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub rewarded_endings: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub character_sort: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub hidden_characters: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqUpdateCharacterSort {
    #[prost(uint32, repeated, tag = "1")]
    pub sort: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChangeMainCharacter {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChangeCharacterSkin {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
    #[prost(uint32, tag = "2")]
    pub skin: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChangeCharacterView {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
    #[prost(uint32, tag = "2")]
    pub slot: u32,
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSetHiddenCharacter {
    #[prost(uint32, repeated, tag = "1")]
    pub chara_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSetHiddenCharacter {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub hidden_characters: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSendGiftToCharacter {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub gifts: ::prost::alloc::vec::Vec<req_send_gift_to_character::Gift>,
}
/// Nested message and enum types in `ReqSendGiftToCharacter`.
pub mod req_send_gift_to_character {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Gift {
        #[prost(uint32, tag = "1")]
        pub item_id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSendGiftToCharacter {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSellItem {
    #[prost(message, repeated, tag = "1")]
    pub sells: ::prost::alloc::vec::Vec<req_sell_item::Item>,
}
/// Nested message and enum types in `ReqSellItem`.
pub mod req_sell_item {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub item_id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCommonView {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub slots: ::prost::alloc::vec::Vec<res_common_view::Slot>,
}
/// Nested message and enum types in `ResCommonView`.
pub mod res_common_view {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Slot {
        #[prost(uint32, tag = "1")]
        pub slot: u32,
        #[prost(uint32, tag = "2")]
        pub value: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChangeCommonView {
    #[prost(uint32, tag = "1")]
    pub slot: u32,
    #[prost(uint32, tag = "2")]
    pub value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSaveCommonViews {
    #[prost(message, repeated, tag = "1")]
    pub views: ::prost::alloc::vec::Vec<ViewSlot>,
    #[prost(uint32, tag = "2")]
    pub save_index: u32,
    #[prost(uint32, tag = "3")]
    pub is_use: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCommonViews {
    #[prost(uint32, tag = "1")]
    pub index: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCommonViews {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "1")]
    pub views: ::prost::alloc::vec::Vec<ViewSlot>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAllcommonViews {
    #[prost(message, repeated, tag = "1")]
    pub views: ::prost::alloc::vec::Vec<res_allcommon_views::Views>,
    #[prost(uint32, tag = "2")]
    pub r#use: u32,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<Error>,
}
/// Nested message and enum types in `ResAllcommonViews`.
pub mod res_allcommon_views {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Views {
        #[prost(message, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<super::ViewSlot>,
        #[prost(uint32, tag = "2")]
        pub index: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUseCommonView {
    #[prost(uint32, tag = "3")]
    pub index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpgradeCharacter {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResUpgradeCharacter {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub character: ::core::option::Option<Character>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFinishedEnding {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
    #[prost(uint32, tag = "2")]
    pub story_id: u32,
    #[prost(uint32, tag = "3")]
    pub ending_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGmCommand {
    #[prost(string, tag = "1")]
    pub command: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResShopInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub shop_info: ::core::option::Option<ShopInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqBuyFromShop {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(message, repeated, tag = "3")]
    pub ver_price: ::prost::alloc::vec::Vec<req_buy_from_shop::Item>,
    #[prost(message, repeated, tag = "4")]
    pub ver_goods: ::prost::alloc::vec::Vec<req_buy_from_shop::Item>,
}
/// Nested message and enum types in `ReqBuyFromShop`.
pub mod req_buy_from_shop {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResBuyFromShop {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<RewardSlot>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqBuyFromZhp {
    #[prost(uint32, tag = "1")]
    pub goods_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqPayMonthTicket {
    #[prost(uint32, tag = "1")]
    pub ticket_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResPayMonthTicket {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub resource_id: u32,
    #[prost(uint32, tag = "3")]
    pub resource_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReshZhpShop {
    #[prost(uint32, tag = "1")]
    pub free_refresh: u32,
    #[prost(uint32, tag = "2")]
    pub cost_refresh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRefreshZhpShop {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub zhp: ::core::option::Option<ZhpShop>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResMonthTicketInfo {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "1")]
    pub month_ticket_info: ::core::option::Option<MonthTicketInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqExchangeCurrency {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResServerSettings {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<ServerSettings>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountSettings {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub settings: ::prost::alloc::vec::Vec<AccountSetting>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpdateAccountSettings {
    #[prost(message, optional, tag = "1")]
    pub setting: ::core::option::Option<AccountSetting>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResModNicknameTime {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "1")]
    pub last_mod_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResMisc {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub recharged_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub faiths: ::prost::alloc::vec::Vec<res_misc::MiscFaithData>,
}
/// Nested message and enum types in `ResMisc`.
pub mod res_misc {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MiscFaithData {
        #[prost(uint32, tag = "1")]
        pub faith_id: u32,
        #[prost(int32, tag = "2")]
        pub count: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqModifySignature {
    #[prost(string, tag = "1")]
    pub signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResIdCardInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(bool, tag = "2")]
    pub is_authed: bool,
    #[prost(string, tag = "3")]
    pub country: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqUpdateIdCardInfo {
    #[prost(string, tag = "1")]
    pub fullname: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub card_no: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResVipReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub gained_vip_levels: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchRefundOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub orders: ::prost::alloc::vec::Vec<res_fetch_refund_order::OrderInfo>,
    #[prost(uint32, tag = "3")]
    pub clear_deadline: u32,
    #[prost(message, repeated, tag = "4")]
    pub message: ::prost::alloc::vec::Vec<I18nContext>,
}
/// Nested message and enum types in `ResFetchRefundOrder`.
pub mod res_fetch_refund_order {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct OrderInfo {
        #[prost(uint32, tag = "1")]
        pub success_time: u32,
        #[prost(uint32, tag = "2")]
        pub goods_id: u32,
        #[prost(uint32, tag = "3")]
        pub cleared: u32,
        #[prost(string, tag = "4")]
        pub order_id: ::prost::alloc::string::String,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGainVipReward {
    #[prost(uint32, tag = "1")]
    pub vip_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchCustomizedContestList {
    #[prost(uint32, tag = "1")]
    pub start: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(string, tag = "3")]
    pub lang: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCustomizedContestList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub contests: ::prost::alloc::vec::Vec<CustomizedContestBase>,
    #[prost(message, repeated, tag = "3")]
    pub follow_contests: ::prost::alloc::vec::Vec<CustomizedContestBase>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchCustomizedContestAuthInfo {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCustomizedContestAuthInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub observer_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqEnterCustomizedContest {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(string, tag = "2")]
    pub lang: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResEnterCustomizedContest {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub detail_info: ::core::option::Option<CustomizedContestDetail>,
    #[prost(message, optional, tag = "3")]
    pub player_report: ::core::option::Option<CustomizedContestPlayerReport>,
    #[prost(bool, tag = "4")]
    pub is_followed: bool,
    #[prost(uint32, tag = "5")]
    pub state: u32,
    #[prost(bool, tag = "6")]
    pub is_admin: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchCustomizedContestOnlineInfo {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCustomizedContestOnlineInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub online_player: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchCustomizedContestByContestId {
    #[prost(uint32, tag = "1")]
    pub contest_id: u32,
    #[prost(string, tag = "2")]
    pub lang: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCustomizedContestByContestId {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub contest_info: ::core::option::Option<CustomizedContestAbstract>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSignupCustomizedContest {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(string, tag = "2")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSignupCustomizedContest {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqStartCustomizedContest {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(string, tag = "2")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqStopCustomizedContest {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqJoinCustomizedContestChatRoom {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResJoinCustomizedContestChatRoom {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSayChatMessage {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchCustomizedContestGameLiveList {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCustomizedContestGameLiveList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub live_list: ::prost::alloc::vec::Vec<GameLiveHead>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchCustomizedContestGameRecords {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub last_index: u32,
    #[prost(uint32, tag = "3")]
    pub season_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchCustomizedContestGameRecords {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub next_index: u32,
    #[prost(message, repeated, tag = "3")]
    pub record_list: ::prost::alloc::vec::Vec<RecordGame>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqTargetCustomizedContest {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResActivityList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub activities: ::prost::alloc::vec::Vec<Activity>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAccountActivityData {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub exchange_records: ::prost::alloc::vec::Vec<ExchangeRecord>,
    #[prost(message, repeated, tag = "3")]
    pub task_progress_list: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(message, repeated, tag = "4")]
    pub accumulated_point_list: ::prost::alloc::vec::Vec<ActivityAccumulatedPointData>,
    #[prost(message, repeated, tag = "5")]
    pub rank_data_list: ::prost::alloc::vec::Vec<ActivityRankPointData>,
    #[prost(message, repeated, tag = "6")]
    pub flip_task_progress_list: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(message, repeated, tag = "7")]
    pub sign_in_data: ::prost::alloc::vec::Vec<res_account_activity_data::ActivitySignInData>,
    #[prost(message, repeated, tag = "8")]
    pub richman_data: ::prost::alloc::vec::Vec<res_account_activity_data::ActivityRichmanData>,
    #[prost(message, repeated, tag = "9")]
    pub period_task_progress_list: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(message, repeated, tag = "10")]
    pub random_task_progress_list: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(message, repeated, tag = "11")]
    pub chest_up_data: ::prost::alloc::vec::Vec<res_account_activity_data::ChestUpData>,
    #[prost(message, optional, tag = "12")]
    pub sns_data: ::core::option::Option<res_account_activity_data::ActivitySnsData>,
    #[prost(message, repeated, tag = "13")]
    pub mine_data: ::prost::alloc::vec::Vec<MineActivityData>,
    #[prost(message, repeated, tag = "14")]
    pub rpg_data: ::prost::alloc::vec::Vec<RpgActivity>,
    #[prost(message, repeated, tag = "15")]
    pub arena_data: ::prost::alloc::vec::Vec<ActivityArenaData>,
    #[prost(message, repeated, tag = "16")]
    pub feed_data: ::prost::alloc::vec::Vec<FeedActivityData>,
    #[prost(message, repeated, tag = "17")]
    pub segment_task_progress_list: ::prost::alloc::vec::Vec<SegmentTaskProgress>,
    #[prost(message, repeated, tag = "18")]
    pub vote_records: ::prost::alloc::vec::Vec<VoteData>,
    #[prost(message, repeated, tag = "19")]
    pub spot_data: ::prost::alloc::vec::Vec<ActivitySpotData>,
    #[prost(message, repeated, tag = "20")]
    pub friend_gift_data: ::prost::alloc::vec::Vec<ActivityFriendGiftData>,
    #[prost(message, repeated, tag = "21")]
    pub upgrade_data: ::prost::alloc::vec::Vec<ActivityUpgradeData>,
    #[prost(message, repeated, tag = "22")]
    pub gacha_data: ::prost::alloc::vec::Vec<ActivityGachaUpdateData>,
    #[prost(message, repeated, tag = "23")]
    pub simulation_data: ::prost::alloc::vec::Vec<ActivitySimulationData>,
    #[prost(message, repeated, tag = "24")]
    pub combining_data: ::prost::alloc::vec::Vec<ActivityCombiningLqData>,
    #[prost(message, repeated, tag = "25")]
    pub village_data: ::prost::alloc::vec::Vec<ActivityVillageData>,
    #[prost(message, repeated, tag = "26")]
    pub festival_data: ::prost::alloc::vec::Vec<ActivityFestivalData>,
    #[prost(message, repeated, tag = "27")]
    pub island_data: ::prost::alloc::vec::Vec<ActivityIslandData>,
}
/// Nested message and enum types in `ResAccountActivityData`.
pub mod res_account_activity_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ActivitySignInData {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(uint32, tag = "2")]
        pub sign_in_count: u32,
        #[prost(uint32, tag = "3")]
        pub last_sign_in_time: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct BuffData {
        #[prost(uint32, tag = "1")]
        pub r#type: u32,
        #[prost(uint32, tag = "2")]
        pub remain: u32,
        #[prost(uint32, tag = "3")]
        pub effect: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ActivityRichmanData {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(uint32, tag = "2")]
        pub location: u32,
        #[prost(uint32, tag = "3")]
        pub finished_count: u32,
        #[prost(uint32, tag = "4")]
        pub chest_position: u32,
        #[prost(uint32, tag = "5")]
        pub bank_save: u32,
        #[prost(uint32, tag = "6")]
        pub exp: u32,
        #[prost(message, repeated, tag = "7")]
        pub buff: ::prost::alloc::vec::Vec<BuffData>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ChestUpData {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ActivitySnsData {
        #[prost(message, repeated, tag = "1")]
        pub blog: ::prost::alloc::vec::Vec<super::SnsBlog>,
        #[prost(uint32, repeated, tag = "2")]
        pub liked_id: ::prost::alloc::vec::Vec<u32>,
        #[prost(message, repeated, tag = "3")]
        pub reply: ::prost::alloc::vec::Vec<super::SnsReply>,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SnsBlog {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub read_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SnsReply {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub reply_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqExchangeActivityItem {
    #[prost(uint32, tag = "1")]
    pub exchange_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResExchangeActivityItem {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub execute_reward: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCompleteActivityTask {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCompleteActivityTaskBatch {
    #[prost(uint32, repeated, tag = "1")]
    pub task_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCompletePeriodActivityTaskBatch {
    #[prost(uint32, repeated, tag = "1")]
    pub task_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveActivityFlipTask {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveActivityFlipTask {
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCompleteSegmentTaskReward {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCompleteSegmentTaskReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchActivityFlipInfo {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchActivityFlipInfo {
    #[prost(uint32, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGainAccumulatedPointActivityReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub reward_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGainMultiPointActivityReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub reward_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchRankPointLeaderboard {
    #[prost(uint32, tag = "1")]
    pub leaderboard_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchRankPointLeaderboard {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_fetch_rank_point_leaderboard::Item>,
    #[prost(uint32, tag = "3")]
    pub last_refresh_time: u32,
}
/// Nested message and enum types in `ResFetchRankPointLeaderboard`.
pub mod res_fetch_rank_point_leaderboard {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Item {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub rank: u32,
        #[prost(message, optional, tag = "3")]
        pub view: ::core::option::Option<super::PlayerBaseView>,
        #[prost(uint32, tag = "4")]
        pub point: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGainRankPointReward {
    #[prost(uint32, tag = "1")]
    pub leaderboard_id: u32,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRichmanNextMove {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRichmanNextMove {
    #[prost(message, repeated, tag = "1")]
    pub paths: ::prost::alloc::vec::Vec<res_richman_next_move::PathData>,
    #[prost(uint32, tag = "2")]
    pub dice: u32,
    #[prost(uint32, tag = "3")]
    pub location: u32,
    #[prost(uint32, tag = "4")]
    pub finished_count: u32,
    #[prost(uint32, tag = "5")]
    pub step: u32,
    #[prost(message, repeated, tag = "6")]
    pub buff: ::prost::alloc::vec::Vec<res_richman_next_move::BuffData>,
    #[prost(uint32, tag = "7")]
    pub bank_save: u32,
    #[prost(uint32, tag = "8")]
    pub chest_position: u32,
    #[prost(uint32, tag = "9")]
    pub exp: u32,
    #[prost(uint32, tag = "10")]
    pub bank_save_add: u32,
    #[prost(message, optional, tag = "11")]
    pub error: ::core::option::Option<Error>,
}
/// Nested message and enum types in `ResRichmanNextMove`.
pub mod res_richman_next_move {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardData {
        #[prost(uint32, tag = "1")]
        pub resource_id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
        #[prost(uint32, tag = "3")]
        pub origin_count: u32,
        #[prost(uint32, tag = "5")]
        pub r#type: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PathData {
        #[prost(uint32, tag = "1")]
        pub location: u32,
        #[prost(message, repeated, tag = "2")]
        pub rewards: ::prost::alloc::vec::Vec<RewardData>,
        #[prost(uint32, repeated, tag = "3")]
        pub events: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct BuffData {
        #[prost(uint32, tag = "1")]
        pub r#type: u32,
        #[prost(uint32, tag = "2")]
        pub remain: u32,
        #[prost(uint32, tag = "3")]
        pub effect: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRichmanSpecialMove {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub step: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRichmanChestInfo {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRichmanChestInfo {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<res_richman_chest_info::ItemData>,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
}
/// Nested message and enum types in `ResRichmanChestInfo`.
pub mod res_richman_chest_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ItemData {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateGameObserveAuth {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateGameObserveAuth {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub location: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqRefreshGameObserveAuth {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRefreshGameObserveAuth {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub ttl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResActivityBuff {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub buff_list: ::prost::alloc::vec::Vec<ActivityBuffData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpgradeActivityBuff {
    #[prost(uint32, tag = "1")]
    pub buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpgradeActivityLevel {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub group: u32,
    #[prost(uint32, tag = "3")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResUpgradeActivityLevel {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveUpgradeActivityReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveUpgradeActivityReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveAllActivityGift {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveAllActivityGift {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rewards: ::prost::alloc::vec::Vec<ExecuteReward>,
    #[prost(message, repeated, tag = "3")]
    pub receive_gift: ::prost::alloc::vec::Vec<res_receive_all_activity_gift::ReceiveRewards>,
}
/// Nested message and enum types in `ResReceiveAllActivityGift`.
pub mod res_receive_all_activity_gift {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ReceiveRewards {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub from_account_id: u32,
        #[prost(uint32, tag = "3")]
        pub item_id: u32,
        #[prost(uint32, tag = "4")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResUpgradeChallenge {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub task_progress: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(uint32, tag = "3")]
    pub refresh_count: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub match_count: u32,
    #[prost(uint32, tag = "6")]
    pub ticket_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRefreshChallenge {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub task_progress: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(uint32, tag = "3")]
    pub refresh_count: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub match_count: u32,
    #[prost(uint32, tag = "6")]
    pub ticket_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchChallengeInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub task_progress: ::prost::alloc::vec::Vec<TaskProgress>,
    #[prost(uint32, tag = "3")]
    pub refresh_count: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub match_count: u32,
    #[prost(uint32, tag = "6")]
    pub ticket_id: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub rewarded_season: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqForceCompleteChallengeTask {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchAbMatch {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub match_id: u32,
    #[prost(uint32, tag = "3")]
    pub match_count: u32,
    #[prost(uint32, tag = "4")]
    pub buy_in_count: u32,
    #[prost(uint32, tag = "5")]
    pub point: u32,
    #[prost(bool, tag = "6")]
    pub rewarded: bool,
    #[prost(message, repeated, tag = "7")]
    pub match_max_point: ::prost::alloc::vec::Vec<res_fetch_ab_match::MatchPoint>,
    #[prost(bool, tag = "8")]
    pub quit: bool,
}
/// Nested message and enum types in `ResFetchABMatch`.
pub mod res_fetch_ab_match {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MatchPoint {
        #[prost(uint32, tag = "1")]
        pub match_id: u32,
        #[prost(uint32, tag = "2")]
        pub point: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqStartUnifiedMatch {
    #[prost(string, tag = "1")]
    pub match_sid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_version_string: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCancelUnifiedMatch {
    #[prost(string, tag = "1")]
    pub match_sid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResChallengeSeasonInfo {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "1")]
    pub challenge_season_list: ::prost::alloc::vec::Vec<res_challenge_season_info::ChallengeInfo>,
}
/// Nested message and enum types in `ResChallengeSeasonInfo`.
pub mod res_challenge_season_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ChallengeInfo {
        #[prost(uint32, tag = "1")]
        pub season_id: u32,
        #[prost(uint32, tag = "2")]
        pub start_time: u32,
        #[prost(uint32, tag = "3")]
        pub end_time: u32,
        #[prost(uint32, tag = "4")]
        pub state: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveChallengeRankReward {
    #[prost(uint32, tag = "1")]
    pub season_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveChallengeRankReward {
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<res_receive_challenge_rank_reward::Reward>,
}
/// Nested message and enum types in `ResReceiveChallengeRankReward`.
pub mod res_receive_challenge_rank_reward {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Reward {
        #[prost(uint32, tag = "1")]
        pub resource_id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqBuyInAbMatch {
    #[prost(uint32, tag = "1")]
    pub match_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGamePointRank {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGamePointRank {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rank: ::prost::alloc::vec::Vec<res_game_point_rank::RankInfo>,
    #[prost(uint32, tag = "3")]
    pub self_rank: u32,
}
/// Nested message and enum types in `ResGamePointRank`.
pub mod res_game_point_rank {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RankInfo {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub point: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchSelfGamePointRank {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub self_rate: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReadSns {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReadSns {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub sns_content: ::core::option::Option<SnsBlog>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReplySns {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReplySns {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub sns_reply: ::core::option::Option<SnsReply>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqLikeSns {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResLikeSns {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub is_liked: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqDigMine {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, optional, tag = "2")]
    pub point: ::core::option::Option<Point>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResDigMine {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub map: ::prost::alloc::vec::Vec<MineReward>,
    #[prost(message, repeated, tag = "3")]
    pub reward: ::prost::alloc::vec::Vec<RewardSlot>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchLastPrivacy {
    #[prost(uint32, repeated, tag = "1")]
    pub r#type: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchLastPrivacy {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub privacy: ::prost::alloc::vec::Vec<res_fetch_last_privacy::PrivacyInfo>,
}
/// Nested message and enum types in `ResFetchLastPrivacy`.
pub mod res_fetch_last_privacy {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PrivacyInfo {
        #[prost(uint32, tag = "1")]
        pub r#type: u32,
        #[prost(string, tag = "2")]
        pub version: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCheckPrivacy {
    #[prost(string, tag = "1")]
    pub device_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub versions: ::prost::alloc::vec::Vec<req_check_privacy::Versions>,
}
/// Nested message and enum types in `ReqCheckPrivacy`.
pub mod req_check_privacy {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Versions {
        #[prost(string, tag = "1")]
        pub version: ::prost::alloc::string::String,
        #[prost(uint32, tag = "3")]
        pub r#type: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqResponseCaptcha {
    #[prost(uint32, tag = "1")]
    pub check_id: u32,
    #[prost(uint32, tag = "2")]
    pub check_time: u32,
    #[prost(string, tag = "3")]
    pub result: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub client_version_string: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub r#type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchRpgBattleHistory {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchRpgBattleHistory {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub battle_result: ::prost::alloc::vec::Vec<res_fetch_rpg_battle_history::BattleResult>,
    #[prost(message, optional, tag = "3")]
    pub start_state: ::core::option::Option<RpgState>,
    #[prost(message, optional, tag = "4")]
    pub current_state: ::core::option::Option<RpgState>,
}
/// Nested message and enum types in `ResFetchRPGBattleHistory`.
pub mod res_fetch_rpg_battle_history {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BattleResult {
        #[prost(string, tag = "14")]
        pub uuid: ::prost::alloc::string::String,
        #[prost(uint32, tag = "1")]
        pub chang: u32,
        #[prost(uint32, tag = "2")]
        pub ju: u32,
        #[prost(uint32, tag = "3")]
        pub ben: u32,
        #[prost(uint32, tag = "4")]
        pub target: u32,
        #[prost(uint32, tag = "5")]
        pub damage: u32,
        #[prost(uint32, tag = "6")]
        pub heal: u32,
        #[prost(uint32, tag = "7")]
        pub monster_seq: u32,
        #[prost(uint32, tag = "8")]
        pub chain_atk: u32,
        #[prost(uint32, tag = "9")]
        pub killed: u32,
        #[prost(uint32, tag = "10")]
        pub is_luk: u32,
        #[prost(uint32, tag = "11")]
        pub is_dex: u32,
        #[prost(uint32, tag = "12")]
        pub is_extra: u32,
        #[prost(string, tag = "13")]
        pub reward: ::prost::alloc::string::String,
        #[prost(uint32, tag = "15")]
        pub points: u32,
        #[prost(uint32, tag = "16")]
        pub is_zimo: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchRpgBattleHistoryV2 {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub battle_result: ::prost::alloc::vec::Vec<res_fetch_rpg_battle_history_v2::BattleResultV2>,
    #[prost(message, optional, tag = "3")]
    pub start_state: ::core::option::Option<RpgState>,
    #[prost(message, optional, tag = "4")]
    pub current_state: ::core::option::Option<RpgState>,
    #[prost(message, repeated, tag = "5")]
    pub recent_battle_result:
        ::prost::alloc::vec::Vec<res_fetch_rpg_battle_history_v2::BattleResultV2>,
}
/// Nested message and enum types in `ResFetchRPGBattleHistoryV2`.
pub mod res_fetch_rpg_battle_history_v2 {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BattleResultV2 {
        #[prost(string, tag = "14")]
        pub uuid: ::prost::alloc::string::String,
        #[prost(uint32, tag = "1")]
        pub chang: u32,
        #[prost(uint32, tag = "2")]
        pub ju: u32,
        #[prost(uint32, tag = "3")]
        pub ben: u32,
        #[prost(uint32, tag = "5")]
        pub damage: u32,
        #[prost(uint32, tag = "7")]
        pub monster_seq: u32,
        #[prost(uint32, tag = "9")]
        pub killed: u32,
        #[prost(message, repeated, tag = "10")]
        pub buff: ::prost::alloc::vec::Vec<super::ActivityBuffData>,
        #[prost(uint32, tag = "11")]
        pub points: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqBuyArenaTicket {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqArenaReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqEnterArena {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResArenaReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_arena_reward::RewardItem>,
}
/// Nested message and enum types in `ResArenaReward`.
pub mod res_arena_reward {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardItem {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveRpgRewards {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveRpgReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub monster_seq: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveRpgRewards {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_receive_rpg_rewards::RewardItem>,
}
/// Nested message and enum types in `ResReceiveRPGRewards`.
pub mod res_receive_rpg_rewards {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardItem {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchObToken {
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchObToken {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub create_time: u32,
    #[prost(uint32, tag = "4")]
    pub delay: u32,
    #[prost(uint32, tag = "5")]
    pub start_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveCharacterRewards {
    #[prost(uint32, tag = "1")]
    pub character_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveCharacterRewards {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_receive_character_rewards::RewardItem>,
}
/// Nested message and enum types in `ResReceiveCharacterRewards`.
pub mod res_receive_character_rewards {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardItem {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFeedActivityFeed {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFeedActivityFeed {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_feed_activity_feed::RewardItem>,
    #[prost(uint32, tag = "3")]
    pub feed_count: u32,
}
/// Nested message and enum types in `ResFeedActivityFeed`.
pub mod res_feed_activity_feed {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardItem {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqSendActivityGiftToFriend {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
    #[prost(uint32, tag = "3")]
    pub target_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSendActivityGiftToFriend {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub send_gift_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveActivityGift {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchFriendGiftActivityData {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub account_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchFriendGiftActivityData {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub list: ::prost::alloc::vec::Vec<res_fetch_friend_gift_activity_data::FriendData>,
}
/// Nested message and enum types in `ResFetchFriendGiftActivityData`.
pub mod res_fetch_friend_gift_activity_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ItemCountData {
        #[prost(uint32, tag = "1")]
        pub item: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FriendData {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(message, repeated, tag = "2")]
        pub items: ::prost::alloc::vec::Vec<ItemCountData>,
        #[prost(uint32, tag = "3")]
        pub receive_count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqOpenPreChestItem {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "2")]
    pub pool_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOpenPreChestItem {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<OpenResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchVoteActivity {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchVoteActivity {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub vote_rank: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub update_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqVoteActivity {
    #[prost(uint32, tag = "1")]
    pub vote: u32,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResVoteActivity {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub vote_records: ::prost::alloc::vec::Vec<VoteData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUnlockActivitySpot {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUnlockActivitySpotEnding {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub ending_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqReceiveActivitySpotReward {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveActivitySpotReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<res_receive_activity_spot_reward::RewardItem>,
}
/// Nested message and enum types in `ResReceiveActivitySpotReward`.
pub mod res_receive_activity_spot_reward {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RewardItem {
        #[prost(uint32, tag = "1")]
        pub id: u32,
        #[prost(uint32, tag = "2")]
        pub count: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqLogReport {
    #[prost(uint32, tag = "1")]
    pub success: u32,
    #[prost(uint32, tag = "2")]
    pub failed: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqBindOauth2 {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchOauth2 {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchOauth2 {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub openid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResDeleteAccount {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub delete_time: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSetLoadingImage {
    #[prost(uint32, repeated, tag = "1")]
    pub images: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchShopInterval {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub result: ::prost::alloc::vec::Vec<res_fetch_shop_interval::ShopInterval>,
}
/// Nested message and enum types in `ResFetchShopInterval`.
pub mod res_fetch_shop_interval {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ShopInterval {
        #[prost(uint32, tag = "1")]
        pub group_id: u32,
        #[prost(uint32, tag = "2")]
        pub interval: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchActivityInterval {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub result: ::prost::alloc::vec::Vec<res_fetch_activity_interval::ActivityInterval>,
}
/// Nested message and enum types in `ResFetchActivityInterval`.
pub mod res_fetch_activity_interval {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ActivityInterval {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(uint32, tag = "2")]
        pub interval: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchrecentFriend {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub account_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqOpenGacha {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResOpenGacha {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub result_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
    #[prost(message, repeated, tag = "4")]
    pub sp_reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
    #[prost(uint32, tag = "5")]
    pub remain_count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqTaskRequest {
    #[prost(uint32, repeated, tag = "1")]
    pub params: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqSimulationActivityTrain {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSimulationActivityTrain {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub result_type: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub final_stats: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchSimulationGameRecord {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchSimulationGameRecord {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub messages: ::prost::alloc::vec::Vec<ActivitySimulationGameRecordMessage>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqStartSimulationActivityGame {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResStartSimulationActivityGame {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub records: ::prost::alloc::vec::Vec<ActivitySimulationGameRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchSimulationGameRank {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub day: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchSimulationGameRank {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub rank: ::prost::alloc::vec::Vec<res_fetch_simulation_game_rank::RankInfo>,
}
/// Nested message and enum types in `ResFetchSimulationGameRank`.
pub mod res_fetch_simulation_game_rank {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct RankInfo {
        #[prost(uint32, tag = "1")]
        pub character: u32,
        #[prost(float, tag = "2")]
        pub score: f32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqGenerateCombiningCraft {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub bin_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGenerateCombiningCraft {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
    #[prost(uint32, tag = "3")]
    pub craft_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqMoveCombiningCraft {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub from: u32,
    #[prost(uint32, tag = "3")]
    pub to: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResMoveCombiningCraft {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
    #[prost(uint32, tag = "3")]
    pub combined: u32,
    #[prost(uint32, tag = "4")]
    pub craft_id: u32,
    #[prost(message, optional, tag = "5")]
    pub bonus: ::core::option::Option<res_move_combining_craft::BonusData>,
}
/// Nested message and enum types in `ResMoveCombiningCraft`.
pub mod res_move_combining_craft {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct BonusData {
        #[prost(uint32, tag = "1")]
        pub craft_id: u32,
        #[prost(uint32, tag = "2")]
        pub pos: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCombiningRecycleCraft {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCombiningRecycleCraft {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqRecoverCombiningRecycle {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResRecoverCombiningRecycle {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub craft_id: u32,
    #[prost(uint32, tag = "3")]
    pub pos: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFinishCombiningOrder {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub craft_pos: u32,
    #[prost(uint32, tag = "3")]
    pub order_pos: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFinishCombiningOrder {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchInfo {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub server_time: ::core::option::Option<ResServerTime>,
    #[prost(message, optional, tag = "3")]
    pub server_setting: ::core::option::Option<ResServerSettings>,
    #[prost(message, optional, tag = "4")]
    pub client_value: ::core::option::Option<ResClientValue>,
    #[prost(message, optional, tag = "5")]
    pub friend_list: ::core::option::Option<ResFriendList>,
    #[prost(message, optional, tag = "6")]
    pub friend_apply_list: ::core::option::Option<ResFriendApplyList>,
    #[prost(message, optional, tag = "7")]
    pub recent_friend: ::core::option::Option<ResFetchrecentFriend>,
    #[prost(message, optional, tag = "8")]
    pub mail_info: ::core::option::Option<ResMailInfo>,
    #[prost(message, optional, tag = "9")]
    pub receive_coin_info: ::core::option::Option<ResReviveCoinInfo>,
    #[prost(message, optional, tag = "10")]
    pub title_list: ::core::option::Option<ResTitleList>,
    #[prost(message, optional, tag = "11")]
    pub bag_info: ::core::option::Option<ResBagInfo>,
    #[prost(message, optional, tag = "12")]
    pub shop_info: ::core::option::Option<ResShopInfo>,
    #[prost(message, optional, tag = "13")]
    pub shop_interval: ::core::option::Option<ResFetchShopInterval>,
    #[prost(message, optional, tag = "14")]
    pub activity_data: ::core::option::Option<ResAccountActivityData>,
    #[prost(message, optional, tag = "15")]
    pub activity_interval: ::core::option::Option<ResFetchActivityInterval>,
    #[prost(message, optional, tag = "16")]
    pub activity_buff: ::core::option::Option<ResActivityBuff>,
    #[prost(message, optional, tag = "17")]
    pub vip_reward: ::core::option::Option<ResVipReward>,
    #[prost(message, optional, tag = "18")]
    pub month_ticket_info: ::core::option::Option<ResMonthTicketInfo>,
    #[prost(message, optional, tag = "19")]
    pub achievement: ::core::option::Option<ResAchievement>,
    #[prost(message, optional, tag = "20")]
    pub comment_setting: ::core::option::Option<ResCommentSetting>,
    #[prost(message, optional, tag = "21")]
    pub account_settings: ::core::option::Option<ResAccountSettings>,
    #[prost(message, optional, tag = "22")]
    pub mod_nickname_time: ::core::option::Option<ResModNicknameTime>,
    #[prost(message, optional, tag = "23")]
    pub misc: ::core::option::Option<ResMisc>,
    #[prost(message, optional, tag = "24")]
    pub announcement: ::core::option::Option<ResAnnouncement>,
    #[prost(message, optional, tag = "25")]
    pub rolling_notice: ::core::option::Option<ReqRollingNotice>,
    #[prost(message, optional, tag = "26")]
    pub activity_list: ::core::option::Option<ResActivityList>,
    #[prost(message, optional, tag = "27")]
    pub character_info: ::core::option::Option<ResCharacterInfo>,
    #[prost(message, optional, tag = "28")]
    pub all_common_views: ::core::option::Option<ResAllcommonViews>,
    #[prost(message, optional, tag = "29")]
    pub collected_game_record_list: ::core::option::Option<ResCollectedGameRecordList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqUpgradeVillageBuilding {
    #[prost(uint32, tag = "1")]
    pub building_id: u32,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqReceiveVillageBuildingReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub building_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub rewards: ::prost::alloc::vec::Vec<RewardSlot>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveVillageBuildingReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqStartVillageTrip {
    #[prost(uint32, tag = "1")]
    pub dest: u32,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqReceiveVillageTripReward {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub dest_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub rewards: ::prost::alloc::vec::Vec<RewardSlot>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResReceiveVillageTripReward {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqCompleteVillageTask {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCompleteVillageTask {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteReward>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGetFriendVillageData {
    #[prost(uint32, repeated, tag = "1")]
    pub account_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGetFriendVillageData {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub list: ::prost::alloc::vec::Vec<res_get_friend_village_data::FriendVillageData>,
}
/// Nested message and enum types in `ResGetFriendVillageData`.
pub mod res_get_friend_village_data {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct FriendVillageData {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(uint32, tag = "2")]
        pub level: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqSetVillageWorker {
    #[prost(uint32, tag = "1")]
    pub building_id: u32,
    #[prost(uint32, tag = "2")]
    pub worker_pos: u32,
    #[prost(uint32, tag = "3")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSetVillageWorker {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub building: ::core::option::Option<VillageBuildingData>,
    #[prost(uint32, tag = "3")]
    pub update_time: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqNextRoundVillage {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResNextRoundVillage {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub activity_data: ::core::option::Option<ActivityVillageData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqResolveFestivalActivityProposal {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub select: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResResolveFestivalActivityProposal {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub effected_buff: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub result: u32,
    #[prost(message, repeated, tag = "4")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteResult>,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqResolveFestivalActivityEvent {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub select: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResResolveFestivalActivityEvent {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, repeated, tag = "2")]
    pub effected_buff: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub reward_items: ::prost::alloc::vec::Vec<ExecuteResult>,
    #[prost(uint32, tag = "5")]
    pub ending_id: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqBuyFestivalProposal {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResBuyFestivalProposal {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, optional, tag = "2")]
    pub new_proposal: ::core::option::Option<FestivalProposalData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqIslandActivityMove {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub zone_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqIslandActivityBuy {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<req_island_activity_buy::BuyItems>,
}
/// Nested message and enum types in `ReqIslandActivityBuy`.
pub mod req_island_activity_buy {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BuyItems {
        #[prost(uint32, tag = "2")]
        pub goods_id: u32,
        #[prost(uint32, repeated, tag = "3")]
        pub pos: ::prost::alloc::vec::Vec<u32>,
        #[prost(uint32, tag = "4")]
        pub rotate: u32,
        #[prost(uint32, tag = "5")]
        pub bag_id: u32,
        #[prost(uint32, tag = "6")]
        pub price: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqIslandActivitySell {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<req_island_activity_sell::SellItem>,
}
/// Nested message and enum types in `ReqIslandActivitySell`.
pub mod req_island_activity_sell {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct SellItem {
        #[prost(uint32, tag = "2")]
        pub bag_id: u32,
        #[prost(uint32, tag = "3")]
        pub id: u32,
        #[prost(uint32, tag = "4")]
        pub price: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqIslandActivityTidyBag {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub bag_data: ::prost::alloc::vec::Vec<req_island_activity_tidy_bag::BagData>,
}
/// Nested message and enum types in `ReqIslandActivityTidyBag`.
pub mod req_island_activity_tidy_bag {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct BagData {
        #[prost(uint32, tag = "2")]
        pub bag_id: u32,
        #[prost(message, repeated, tag = "3")]
        pub items: ::prost::alloc::vec::Vec<bag_data::ITemData>,
        #[prost(uint32, repeated, tag = "4")]
        pub drops: ::prost::alloc::vec::Vec<u32>,
    }
    /// Nested message and enum types in `BagData`.
    pub mod bag_data {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ITemData {
            #[prost(uint32, tag = "1")]
            pub id: u32,
            #[prost(uint32, repeated, tag = "2")]
            pub pos: ::prost::alloc::vec::Vec<u32>,
            #[prost(uint32, tag = "3")]
            pub rotate: u32,
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqIslandActivityUnlockBagGrid {
    #[prost(uint32, tag = "1")]
    pub activity_id: u32,
    #[prost(uint32, tag = "2")]
    pub bag_id: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub pos: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContestSetting {
    #[prost(message, repeated, tag = "1")]
    pub level_limit: ::prost::alloc::vec::Vec<contest_setting::LevelLimit>,
    #[prost(uint32, tag = "2")]
    pub game_limit: u32,
    #[prost(uint32, tag = "3")]
    pub system_broadcast: u32,
}
/// Nested message and enum types in `ContestSetting`.
pub mod contest_setting {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LevelLimit {
        #[prost(uint32, tag = "1")]
        pub r#type: u32,
        #[prost(uint32, tag = "2")]
        pub value: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateCustomizedContest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub open_show: u32,
    #[prost(message, optional, tag = "3")]
    pub game_rule_setting: ::core::option::Option<GameMode>,
    #[prost(uint32, tag = "4")]
    pub start_time: u32,
    #[prost(uint32, tag = "5")]
    pub end_time: u32,
    #[prost(uint32, tag = "6")]
    pub auto_match: u32,
    #[prost(uint32, tag = "7")]
    pub rank_rule: u32,
    #[prost(message, optional, tag = "8")]
    pub contest_setting: ::core::option::Option<ContestSetting>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResCreateCustomizedContest {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqFetchmanagerCustomizedContestList {
    #[prost(string, tag = "1")]
    pub lang: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchManagerCustomizedContestList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub contests: ::prost::alloc::vec::Vec<CustomizedContestBase>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchManagerCustomizedContest {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchManagerCustomizedContest {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub open_show: u32,
    #[prost(message, optional, tag = "4")]
    pub game_rule_setting: ::core::option::Option<GameMode>,
    #[prost(uint32, tag = "5")]
    pub start_time: u32,
    #[prost(uint32, tag = "6")]
    pub end_time: u32,
    #[prost(uint32, tag = "7")]
    pub auto_match: u32,
    #[prost(uint32, tag = "8")]
    pub rank_rule: u32,
    #[prost(uint32, tag = "9")]
    pub check_state: u32,
    #[prost(string, tag = "10")]
    pub checking_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "11")]
    pub contest_setting: ::core::option::Option<ContestSetting>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqUpdateManagerCustomizedContest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub open_show: u32,
    #[prost(message, optional, tag = "3")]
    pub game_rule_setting: ::core::option::Option<GameMode>,
    #[prost(uint32, tag = "4")]
    pub start_time: u32,
    #[prost(uint32, tag = "5")]
    pub end_time: u32,
    #[prost(uint32, tag = "6")]
    pub unique_id: u32,
    #[prost(uint32, tag = "7")]
    pub auto_match: u32,
    #[prost(uint32, tag = "8")]
    pub rank_rule: u32,
    #[prost(message, optional, tag = "9")]
    pub contest_setting: ::core::option::Option<ContestSetting>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchContestPlayerRank {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub limit: u32,
    #[prost(uint32, tag = "3")]
    pub offset: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchContestPlayerRank {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(uint32, tag = "2")]
    pub total: u32,
    #[prost(message, repeated, tag = "3")]
    pub rank: ::prost::alloc::vec::Vec<res_fetch_contest_player_rank::SeasonRank>,
    #[prost(message, optional, tag = "4")]
    pub player_data: ::core::option::Option<res_fetch_contest_player_rank::PlayerData>,
}
/// Nested message and enum types in `ResFetchContestPlayerRank`.
pub mod res_fetch_contest_player_rank {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ContestPlayerAccountData {
        #[prost(uint32, tag = "1")]
        pub total_game_count: u32,
        #[prost(message, repeated, tag = "2")]
        pub recent_games: ::prost::alloc::vec::Vec<contest_player_account_data::ContestGameResult>,
        #[prost(message, repeated, tag = "3")]
        pub highest_series_points:
            ::prost::alloc::vec::Vec<contest_player_account_data::ContestSeriesGameResult>,
    }
    /// Nested message and enum types in `ContestPlayerAccountData`.
    pub mod contest_player_account_data {
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct ContestGameResult {
            #[prost(uint32, tag = "1")]
            pub rank: u32,
            #[prost(int32, tag = "2")]
            pub total_point: i32,
        }
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ContestSeriesGameResult {
            #[prost(uint32, tag = "1")]
            pub key: u32,
            #[prost(message, repeated, tag = "2")]
            pub results: ::prost::alloc::vec::Vec<ContestGameResult>,
        }
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SeasonRank {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(string, tag = "2")]
        pub nickname: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "3")]
        pub data: ::core::option::Option<ContestPlayerAccountData>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PlayerData {
        #[prost(uint32, tag = "1")]
        pub rank: u32,
        #[prost(message, optional, tag = "2")]
        pub data: ::core::option::Option<ContestPlayerAccountData>,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqFetchReadyPlayerList {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResFetchReadyPlayerList {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub list: ::prost::alloc::vec::Vec<res_fetch_ready_player_list::Player>,
}
/// Nested message and enum types in `ResFetchReadyPlayerList`.
pub mod res_fetch_ready_player_list {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Player {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(string, tag = "2")]
        pub nickname: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqCreateGamePlan {
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub account_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub game_start_time: u32,
    #[prost(uint32, tag = "4")]
    pub shuffle_seats: u32,
    #[prost(uint32, tag = "5")]
    pub ai_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGenerateContestManagerLoginCode {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActionMjStart {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewRoundOpenedTiles {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, repeated, tag = "2")]
    pub tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, repeated, tag = "3")]
    pub count: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MuyuInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(uint32, tag = "3")]
    pub count_max: u32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChuanmaGang {
    #[prost(int32, repeated, tag = "1")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "2")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "4")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(message, repeated, tag = "5")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct YongchangInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub moqie_count: u32,
    #[prost(uint32, tag = "3")]
    pub moqie_bonus: u32,
    #[prost(uint32, tag = "4")]
    pub shouqie_count: u32,
    #[prost(uint32, tag = "5")]
    pub shouqie_bonus: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActionNewCard {
    #[prost(uint32, tag = "1")]
    pub field_spell: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecordNewCard {
    #[prost(uint32, tag = "1")]
    pub field_spell: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionNewRound {
    #[prost(uint32, tag = "1")]
    pub chang: u32,
    #[prost(uint32, tag = "2")]
    pub ju: u32,
    #[prost(uint32, tag = "3")]
    pub ben: u32,
    #[prost(string, repeated, tag = "4")]
    pub tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "5")]
    pub dora: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag = "6")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "7")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(uint32, tag = "8")]
    pub liqibang: u32,
    #[prost(message, repeated, tag = "9")]
    pub tingpais0: ::prost::alloc::vec::Vec<TingPaiDiscardInfo>,
    #[prost(message, repeated, tag = "10")]
    pub tingpais1: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(bool, tag = "11")]
    pub al: bool,
    #[prost(string, tag = "12")]
    pub md5: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub left_tile_count: u32,
    #[prost(string, repeated, tag = "14")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "15")]
    pub opens: ::prost::alloc::vec::Vec<NewRoundOpenedTiles>,
    #[prost(message, optional, tag = "16")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(uint32, tag = "17")]
    pub ju_count: u32,
    #[prost(uint32, tag = "18")]
    pub field_spell: u32,
    #[prost(string, tag = "19")]
    pub sha256: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "20")]
    pub yongchang: ::core::option::Option<YongchangInfo>,
    #[prost(string, tag = "21")]
    pub salt_sha256: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordNewRound {
    #[prost(uint32, tag = "1")]
    pub chang: u32,
    #[prost(uint32, tag = "2")]
    pub ju: u32,
    #[prost(uint32, tag = "3")]
    pub ben: u32,
    #[prost(string, tag = "4")]
    pub dora: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "6")]
    pub liqibang: u32,
    #[prost(string, repeated, tag = "7")]
    pub tiles0: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub tiles1: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub tiles2: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "10")]
    pub tiles3: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "11")]
    pub tingpai: ::prost::alloc::vec::Vec<record_new_round::TingPai>,
    #[prost(message, optional, tag = "12")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(string, tag = "13")]
    pub md5: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub paishan: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub left_tile_count: u32,
    #[prost(string, repeated, tag = "16")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "17")]
    pub opens: ::prost::alloc::vec::Vec<NewRoundOpenedTiles>,
    #[prost(message, optional, tag = "18")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "19")]
    pub operations: ::prost::alloc::vec::Vec<OptionalOperationList>,
    #[prost(uint32, tag = "20")]
    pub ju_count: u32,
    #[prost(uint32, tag = "21")]
    pub field_spell: u32,
    #[prost(string, tag = "22")]
    pub sha256: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "23")]
    pub yongchang: ::core::option::Option<YongchangInfo>,
    #[prost(string, tag = "24")]
    pub salt_sha256: ::prost::alloc::string::String,
    #[prost(string, tag = "25")]
    pub salt: ::prost::alloc::string::String,
}
/// Nested message and enum types in `RecordNewRound`.
pub mod record_new_round {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TingPai {
        #[prost(uint32, tag = "1")]
        pub seat: u32,
        #[prost(message, repeated, tag = "2")]
        pub tingpais1: ::prost::alloc::vec::Vec<super::TingPaiInfo>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameSnapshot {
    #[prost(uint32, tag = "1")]
    pub chang: u32,
    #[prost(uint32, tag = "2")]
    pub ju: u32,
    #[prost(uint32, tag = "3")]
    pub ben: u32,
    #[prost(uint32, tag = "4")]
    pub index_player: u32,
    #[prost(uint32, tag = "5")]
    pub left_tile_count: u32,
    #[prost(string, repeated, tag = "6")]
    pub hands: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "8")]
    pub liqibang: u32,
    #[prost(message, repeated, tag = "9")]
    pub players: ::prost::alloc::vec::Vec<game_snapshot::PlayerSnapshot>,
    #[prost(bool, tag = "10")]
    pub zhenting: bool,
}
/// Nested message and enum types in `GameSnapshot`.
pub mod game_snapshot {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PlayerSnapshot {
        #[prost(int32, tag = "1")]
        pub score: i32,
        #[prost(int32, tag = "2")]
        pub liqiposition: i32,
        #[prost(uint32, tag = "3")]
        pub tilenum: u32,
        #[prost(string, repeated, tag = "4")]
        pub qipais: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(message, repeated, tag = "5")]
        pub mings: ::prost::alloc::vec::Vec<player_snapshot::Fulu>,
    }
    /// Nested message and enum types in `PlayerSnapshot`.
    pub mod player_snapshot {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Fulu {
            #[prost(uint32, tag = "1")]
            pub r#type: u32,
            #[prost(string, repeated, tag = "2")]
            pub tile: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
            #[prost(uint32, repeated, tag = "3")]
            pub from: ::prost::alloc::vec::Vec<u32>,
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionPrototype {
    #[prost(uint32, tag = "1")]
    pub step: u32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameDetailRecords {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub records: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, tag = "2")]
    pub version: u32,
    #[prost(message, repeated, tag = "3")]
    pub actions: ::prost::alloc::vec::Vec<GameAction>,
    #[prost(bytes = "vec", tag = "4")]
    pub bar: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameSelfOperation {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(string, tag = "3")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub cancel_operation: bool,
    #[prost(bool, tag = "5")]
    pub moqie: bool,
    #[prost(uint32, tag = "6")]
    pub timeuse: u32,
    #[prost(int32, tag = "7")]
    pub tile_state: i32,
    #[prost(string, repeated, tag = "8")]
    pub change_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, repeated, tag = "9")]
    pub tile_states: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "10")]
    pub gap_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameChiPengGang {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(bool, tag = "3")]
    pub cancel_operation: bool,
    #[prost(uint32, tag = "6")]
    pub timeuse: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameVoteGameEnd {
    #[prost(bool, tag = "1")]
    pub yes: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameUserInput {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(uint32, tag = "3")]
    pub emo: u32,
    #[prost(message, optional, tag = "10")]
    pub operation: ::core::option::Option<GameSelfOperation>,
    #[prost(message, optional, tag = "11")]
    pub cpg: ::core::option::Option<GameChiPengGang>,
    #[prost(message, optional, tag = "12")]
    pub vote: ::core::option::Option<GameVoteGameEnd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameUserEvent {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameAction {
    #[prost(uint32, tag = "1")]
    pub passed: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(bytes = "vec", tag = "3")]
    pub result: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub user_input: ::core::option::Option<GameUserInput>,
    #[prost(message, optional, tag = "5")]
    pub user_event: ::core::option::Option<GameUserEvent>,
    #[prost(uint32, tag = "6")]
    pub game_event: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalOperation {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(string, repeated, tag = "2")]
    pub combination: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub change_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, repeated, tag = "4")]
    pub change_tile_states: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "5")]
    pub gap_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalOperationList {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(message, repeated, tag = "2")]
    pub operation_list: ::prost::alloc::vec::Vec<OptionalOperation>,
    #[prost(uint32, tag = "4")]
    pub time_add: u32,
    #[prost(uint32, tag = "5")]
    pub time_fixed: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LiQiSuccess {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(int32, tag = "2")]
    pub score: i32,
    #[prost(uint32, tag = "3")]
    pub liqibang: u32,
    #[prost(bool, tag = "4")]
    pub failed: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FanInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub val: u32,
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HuleInfo {
    #[prost(string, repeated, tag = "1")]
    pub hand: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub ming: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub hu_tile: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub seat: u32,
    #[prost(bool, tag = "5")]
    pub zimo: bool,
    #[prost(bool, tag = "6")]
    pub qinjia: bool,
    #[prost(bool, tag = "7")]
    pub liqi: bool,
    #[prost(string, repeated, tag = "8")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub li_doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "10")]
    pub yiman: bool,
    #[prost(uint32, tag = "11")]
    pub count: u32,
    #[prost(message, repeated, tag = "12")]
    pub fans: ::prost::alloc::vec::Vec<FanInfo>,
    #[prost(uint32, tag = "13")]
    pub fu: u32,
    #[prost(string, tag = "14")]
    pub title: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub point_rong: u32,
    #[prost(uint32, tag = "16")]
    pub point_zimo_qin: u32,
    #[prost(uint32, tag = "17")]
    pub point_zimo_xian: u32,
    #[prost(uint32, tag = "18")]
    pub title_id: u32,
    #[prost(uint32, tag = "19")]
    pub point_sum: u32,
    #[prost(uint32, tag = "20")]
    pub dadian: u32,
    #[prost(uint32, tag = "21")]
    pub baopai: u32,
    #[prost(uint32, repeated, tag = "22")]
    pub baopai_seats: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, repeated, tag = "23")]
    pub lines: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "24")]
    pub tianming_bonus: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TingPaiInfo {
    #[prost(string, tag = "1")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub haveyi: bool,
    #[prost(bool, tag = "3")]
    pub yiman: bool,
    #[prost(uint32, tag = "4")]
    pub count: u32,
    #[prost(uint32, tag = "5")]
    pub fu: u32,
    #[prost(uint32, tag = "6")]
    pub biao_dora_count: u32,
    #[prost(bool, tag = "7")]
    pub yiman_zimo: bool,
    #[prost(uint32, tag = "8")]
    pub count_zimo: u32,
    #[prost(uint32, tag = "9")]
    pub fu_zimo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TingPaiDiscardInfo {
    #[prost(string, tag = "1")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "3")]
    pub infos: ::prost::alloc::vec::Vec<TingPaiInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HunZhiYiJiBuffInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub continue_deal_count: u32,
    #[prost(bool, tag = "3")]
    pub overload: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameEnd {
    #[prost(int32, repeated, tag = "1")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionSelectGap {
    #[prost(uint32, repeated, tag = "1")]
    pub gap_types: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub tingpais0: ::prost::alloc::vec::Vec<TingPaiDiscardInfo>,
    #[prost(message, repeated, tag = "3")]
    pub tingpais1: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordSelectGap {
    #[prost(uint32, repeated, tag = "1")]
    pub gap_types: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub tingpai: ::prost::alloc::vec::Vec<record_select_gap::TingPai>,
    #[prost(message, optional, tag = "3")]
    pub operation: ::core::option::Option<OptionalOperationList>,
}
/// Nested message and enum types in `RecordSelectGap`.
pub mod record_select_gap {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TingPai {
        #[prost(uint32, tag = "1")]
        pub seat: u32,
        #[prost(message, repeated, tag = "2")]
        pub tingpais1: ::prost::alloc::vec::Vec<super::TingPaiInfo>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionChangeTile {
    #[prost(string, repeated, tag = "1")]
    pub in_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, repeated, tag = "2")]
    pub in_tile_states: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "3")]
    pub out_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, repeated, tag = "4")]
    pub out_tile_states: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "5")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "6")]
    pub tingpais0: ::prost::alloc::vec::Vec<TingPaiDiscardInfo>,
    #[prost(message, repeated, tag = "7")]
    pub tingpais1: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(message, optional, tag = "8")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(uint32, tag = "9")]
    pub change_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordChangeTile {
    #[prost(string, repeated, tag = "1")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub tingpai: ::prost::alloc::vec::Vec<record_change_tile::TingPai>,
    #[prost(message, repeated, tag = "3")]
    pub change_tile_infos: ::prost::alloc::vec::Vec<record_change_tile::ChangeTile>,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(uint32, tag = "5")]
    pub change_type: u32,
    #[prost(message, repeated, tag = "6")]
    pub operations: ::prost::alloc::vec::Vec<OptionalOperationList>,
}
/// Nested message and enum types in `RecordChangeTile`.
pub mod record_change_tile {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TingPai {
        #[prost(uint32, tag = "1")]
        pub seat: u32,
        #[prost(message, repeated, tag = "2")]
        pub tingpais1: ::prost::alloc::vec::Vec<super::TingPaiInfo>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChangeTile {
        #[prost(string, repeated, tag = "1")]
        pub in_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(int32, repeated, tag = "2")]
        pub in_tile_states: ::prost::alloc::vec::Vec<i32>,
        #[prost(string, repeated, tag = "3")]
        pub out_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(int32, repeated, tag = "4")]
        pub out_tile_states: ::prost::alloc::vec::Vec<i32>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionRevealTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(bool, tag = "2")]
    pub is_liqi: bool,
    #[prost(bool, tag = "3")]
    pub is_wliqi: bool,
    #[prost(bool, tag = "4")]
    pub moqie: bool,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "6")]
    pub liqibang: u32,
    #[prost(message, optional, tag = "7")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(message, repeated, tag = "8")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(string, tag = "9")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub zhenting: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordRevealTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(bool, tag = "2")]
    pub is_liqi: bool,
    #[prost(bool, tag = "3")]
    pub is_wliqi: bool,
    #[prost(bool, tag = "4")]
    pub moqie: bool,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "6")]
    pub liqibang: u32,
    #[prost(message, repeated, tag = "7")]
    pub operations: ::prost::alloc::vec::Vec<OptionalOperationList>,
    #[prost(message, repeated, tag = "8")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(string, tag = "9")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, repeated, tag = "10")]
    pub zhenting: ::prost::alloc::vec::Vec<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionUnveilTile {
    #[prost(int32, tag = "1")]
    pub seat: i32,
    #[prost(int32, repeated, tag = "2")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "3")]
    pub liqibang: u32,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordUnveilTile {
    #[prost(int32, tag = "1")]
    pub seat: i32,
    #[prost(int32, repeated, tag = "2")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "3")]
    pub liqibang: u32,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionLockTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(int32, repeated, tag = "2")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "3")]
    pub liqibang: u32,
    #[prost(string, tag = "4")]
    pub tile: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(bool, tag = "6")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "7")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(string, repeated, tag = "8")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "9")]
    pub lock_state: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordLockTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(int32, repeated, tag = "2")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "3")]
    pub liqibang: u32,
    #[prost(string, tag = "4")]
    pub tile: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub operation: ::prost::alloc::vec::Vec<OptionalOperationList>,
    #[prost(bool, repeated, tag = "6")]
    pub zhentings: ::prost::alloc::vec::Vec<bool>,
    #[prost(message, repeated, tag = "7")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(string, repeated, tag = "8")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "9")]
    pub lock_state: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionDiscardTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, tag = "2")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_liqi: bool,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(bool, tag = "5")]
    pub moqie: bool,
    #[prost(bool, tag = "6")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "7")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(string, repeated, tag = "8")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "9")]
    pub is_wliqi: bool,
    #[prost(uint32, tag = "10")]
    pub tile_state: u32,
    #[prost(message, optional, tag = "11")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(bool, tag = "12")]
    pub revealed: bool,
    #[prost(int32, repeated, tag = "13")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "14")]
    pub liqibang: u32,
    #[prost(message, optional, tag = "25")]
    pub yongchang: ::core::option::Option<YongchangInfo>,
    #[prost(message, optional, tag = "26")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordDiscardTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, tag = "2")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_liqi: bool,
    #[prost(bool, tag = "5")]
    pub moqie: bool,
    #[prost(bool, repeated, tag = "6")]
    pub zhenting: ::prost::alloc::vec::Vec<bool>,
    #[prost(message, repeated, tag = "7")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(string, repeated, tag = "8")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "9")]
    pub is_wliqi: bool,
    #[prost(message, repeated, tag = "10")]
    pub operations: ::prost::alloc::vec::Vec<OptionalOperationList>,
    #[prost(uint32, tag = "11")]
    pub tile_state: u32,
    #[prost(message, optional, tag = "12")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, optional, tag = "13")]
    pub yongchang: ::core::option::Option<YongchangInfo>,
    #[prost(message, optional, tag = "14")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionDealTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, tag = "2")]
    pub tile: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub left_tile_count: u32,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(message, optional, tag = "5")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "7")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "8")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiDiscardInfo>,
    #[prost(uint32, tag = "9")]
    pub tile_state: u32,
    #[prost(message, optional, tag = "10")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(uint32, tag = "11")]
    pub tile_index: u32,
    #[prost(message, optional, tag = "12")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordDealTile {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, tag = "2")]
    pub tile: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub left_tile_count: u32,
    #[prost(message, optional, tag = "5")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, repeated, tag = "7")]
    pub zhenting: ::prost::alloc::vec::Vec<bool>,
    #[prost(message, optional, tag = "8")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(uint32, tag = "9")]
    pub tile_state: u32,
    #[prost(message, optional, tag = "11")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(uint32, tag = "12")]
    pub tile_index: u32,
    #[prost(message, optional, tag = "13")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionFillAwaitingTiles {
    #[prost(string, repeated, tag = "1")]
    pub awaiting_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "2")]
    pub left_tile_count: u32,
    #[prost(message, optional, tag = "3")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(message, optional, tag = "4")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordFillAwaitingTiles {
    #[prost(string, repeated, tag = "1")]
    pub awaiting_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "2")]
    pub left_tile_count: u32,
    #[prost(message, optional, tag = "3")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(message, optional, tag = "4")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionChiPengGang {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, repeated, tag = "3")]
    pub tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, repeated, tag = "4")]
    pub froms: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(message, optional, tag = "6")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(bool, tag = "7")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "8")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiDiscardInfo>,
    #[prost(uint32, repeated, tag = "9")]
    pub tile_states: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(int32, repeated, tag = "11")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "12")]
    pub liqibang: u32,
    #[prost(message, optional, tag = "13")]
    pub yongchang: ::core::option::Option<YongchangInfo>,
    #[prost(message, optional, tag = "14")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordChiPengGang {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, repeated, tag = "3")]
    pub tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, repeated, tag = "4")]
    pub froms: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(bool, repeated, tag = "7")]
    pub zhenting: ::prost::alloc::vec::Vec<bool>,
    #[prost(message, optional, tag = "8")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(uint32, repeated, tag = "9")]
    pub tile_states: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(int32, repeated, tag = "11")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "12")]
    pub liqibang: u32,
    #[prost(message, optional, tag = "13")]
    pub yongchang: ::core::option::Option<YongchangInfo>,
    #[prost(message, optional, tag = "14")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionGangResult {
    #[prost(message, optional, tag = "1")]
    pub gang_infos: ::core::option::Option<ChuanmaGang>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordGangResult {
    #[prost(message, optional, tag = "1")]
    pub gang_infos: ::core::option::Option<ChuanmaGang>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionGangResultEnd {
    #[prost(message, optional, tag = "1")]
    pub gang_infos: ::core::option::Option<ChuanmaGang>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordGangResultEnd {
    #[prost(message, optional, tag = "1")]
    pub gang_infos: ::core::option::Option<ChuanmaGang>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionAnGangAddGang {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, tag = "3")]
    pub tiles: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "7")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "8")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(message, optional, tag = "9")]
    pub muyu: ::core::option::Option<MuyuInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordAnGangAddGang {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub r#type: u32,
    #[prost(string, tag = "3")]
    pub tiles: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "7")]
    pub operations: ::prost::alloc::vec::Vec<OptionalOperationList>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionBaBei {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(message, optional, tag = "4")]
    pub operation: ::core::option::Option<OptionalOperationList>,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "7")]
    pub zhenting: bool,
    #[prost(message, repeated, tag = "8")]
    pub tingpais: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(bool, tag = "9")]
    pub moqie: bool,
    #[prost(uint32, tag = "10")]
    pub tile_state: u32,
    #[prost(message, optional, tag = "11")]
    pub muyu: ::core::option::Option<MuyuInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordBaBei {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "7")]
    pub operations: ::prost::alloc::vec::Vec<OptionalOperationList>,
    #[prost(bool, tag = "8")]
    pub moqie: bool,
    #[prost(uint32, tag = "10")]
    pub tile_state: u32,
    #[prost(message, optional, tag = "11")]
    pub muyu: ::core::option::Option<MuyuInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionHule {
    #[prost(message, repeated, tag = "1")]
    pub hules: ::prost::alloc::vec::Vec<HuleInfo>,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "4")]
    pub wait_timeout: u32,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "6")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(int32, tag = "9")]
    pub baopai: i32,
    #[prost(message, optional, tag = "10")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordHule {
    #[prost(message, repeated, tag = "1")]
    pub hules: ::prost::alloc::vec::Vec<HuleInfo>,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "4")]
    pub wait_timeout: u32,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "6")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(int32, tag = "9")]
    pub baopai: i32,
    #[prost(message, optional, tag = "10")]
    pub hun_zhi_yi_ji_info: ::core::option::Option<HunZhiYiJiBuffInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HuInfoXueZhanMid {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(uint32, tag = "2")]
    pub hand_count: u32,
    #[prost(string, repeated, tag = "3")]
    pub hand: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub ming: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "5")]
    pub hu_tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub zimo: bool,
    #[prost(bool, tag = "7")]
    pub yiman: bool,
    #[prost(uint32, tag = "8")]
    pub count: u32,
    #[prost(message, repeated, tag = "9")]
    pub fans: ::prost::alloc::vec::Vec<FanInfo>,
    #[prost(uint32, tag = "10")]
    pub fu: u32,
    #[prost(uint32, tag = "11")]
    pub title_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionHuleXueZhanMid {
    #[prost(message, repeated, tag = "1")]
    pub hules: ::prost::alloc::vec::Vec<HuInfoXueZhanMid>,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, optional, tag = "9")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(bool, tag = "10")]
    pub zhenting: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordHuleXueZhanMid {
    #[prost(message, repeated, tag = "1")]
    pub hules: ::prost::alloc::vec::Vec<HuInfoXueZhanMid>,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "5")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, optional, tag = "9")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(bool, repeated, tag = "10")]
    pub zhenting: ::prost::alloc::vec::Vec<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionHuleXueZhanEnd {
    #[prost(message, repeated, tag = "1")]
    pub hules: ::prost::alloc::vec::Vec<HuInfoXueZhanMid>,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "4")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "5")]
    pub wait_timeout: u32,
    #[prost(message, optional, tag = "6")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "9")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordHuleXueZhanEnd {
    #[prost(message, repeated, tag = "1")]
    pub hules: ::prost::alloc::vec::Vec<HuInfoXueZhanMid>,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "4")]
    pub scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "5")]
    pub wait_timeout: u32,
    #[prost(message, optional, tag = "6")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(string, repeated, tag = "7")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "9")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionLiuJu {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(message, optional, tag = "2")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(uint32, tag = "3")]
    pub seat: u32,
    #[prost(string, repeated, tag = "4")]
    pub tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(string, repeated, tag = "6")]
    pub allplayertiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "9")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordLiuJu {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(message, optional, tag = "2")]
    pub gameend: ::core::option::Option<GameEnd>,
    #[prost(uint32, tag = "3")]
    pub seat: u32,
    #[prost(string, repeated, tag = "4")]
    pub tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub liqi: ::core::option::Option<LiQiSuccess>,
    #[prost(string, repeated, tag = "6")]
    pub allplayertiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "9")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoTilePlayerInfo {
    #[prost(bool, tag = "3")]
    pub tingpai: bool,
    #[prost(string, repeated, tag = "4")]
    pub hand: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "5")]
    pub tings: ::prost::alloc::vec::Vec<TingPaiInfo>,
    #[prost(bool, tag = "6")]
    pub already_hule: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoTileScoreInfo {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(int32, repeated, tag = "2")]
    pub old_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, tag = "3")]
    pub delta_scores: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "4")]
    pub hand: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "5")]
    pub ming: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "6")]
    pub doras: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "7")]
    pub score: u32,
    #[prost(int32, repeated, tag = "8")]
    pub taxes: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "9")]
    pub lines: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionNoTile {
    #[prost(bool, tag = "1")]
    pub liujumanguan: bool,
    #[prost(message, repeated, tag = "2")]
    pub players: ::prost::alloc::vec::Vec<NoTilePlayerInfo>,
    #[prost(message, repeated, tag = "3")]
    pub scores: ::prost::alloc::vec::Vec<NoTileScoreInfo>,
    #[prost(bool, tag = "4")]
    pub gameend: bool,
    #[prost(message, optional, tag = "5")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "9")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordNoTile {
    #[prost(bool, tag = "1")]
    pub liujumanguan: bool,
    #[prost(message, repeated, tag = "2")]
    pub players: ::prost::alloc::vec::Vec<NoTilePlayerInfo>,
    #[prost(message, repeated, tag = "3")]
    pub scores: ::prost::alloc::vec::Vec<NoTileScoreInfo>,
    #[prost(bool, tag = "4")]
    pub gameend: bool,
    #[prost(message, optional, tag = "5")]
    pub muyu: ::core::option::Option<MuyuInfo>,
    #[prost(message, repeated, tag = "9")]
    pub hules_history: ::prost::alloc::vec::Vec<HuleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLeaving {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqAuthGame {
    #[prost(uint32, tag = "1")]
    pub account_id: u32,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub session: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub gift: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub vs: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResAuthGame {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub players: ::prost::alloc::vec::Vec<PlayerGameView>,
    #[prost(uint32, repeated, tag = "3")]
    pub seat_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "4")]
    pub is_game_start: bool,
    #[prost(message, optional, tag = "5")]
    pub game_config: ::core::option::Option<GameConfig>,
    #[prost(uint32, repeated, tag = "6")]
    pub ready_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameRestore {
    #[prost(message, optional, tag = "1")]
    pub snapshot: ::core::option::Option<GameSnapshot>,
    #[prost(message, repeated, tag = "2")]
    pub actions: ::prost::alloc::vec::Vec<ActionPrototype>,
    #[prost(uint32, tag = "3")]
    pub passed_waiting_time: u32,
    #[prost(uint32, tag = "4")]
    pub game_state: u32,
    #[prost(uint32, tag = "5")]
    pub start_time: u32,
    #[prost(uint32, tag = "6")]
    pub last_pause_time_ms: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResEnterGame {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(bool, tag = "2")]
    pub is_end: bool,
    #[prost(uint32, tag = "3")]
    pub step: u32,
    #[prost(message, optional, tag = "4")]
    pub game_restore: ::core::option::Option<GameRestore>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSyncGame {
    #[prost(string, tag = "1")]
    pub round_id: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub step: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResSyncGame {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(bool, tag = "2")]
    pub is_end: bool,
    #[prost(uint32, tag = "3")]
    pub step: u32,
    #[prost(message, optional, tag = "4")]
    pub game_restore: ::core::option::Option<GameRestore>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqSelfOperation {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(string, tag = "3")]
    pub tile: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub cancel_operation: bool,
    #[prost(bool, tag = "5")]
    pub moqie: bool,
    #[prost(uint32, tag = "6")]
    pub timeuse: u32,
    #[prost(int32, tag = "7")]
    pub tile_state: i32,
    #[prost(string, repeated, tag = "8")]
    pub change_tiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, repeated, tag = "9")]
    pub tile_states: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "10")]
    pub gap_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqChiPengGang {
    #[prost(uint32, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(bool, tag = "3")]
    pub cancel_operation: bool,
    #[prost(uint32, tag = "6")]
    pub timeuse: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqBroadcastInGame {
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub except_self: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqGmCommandInGaming {
    #[prost(string, tag = "1")]
    pub json_data: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGamePlayerState {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(enumeration = "GamePlayerState", repeated, tag = "2")]
    pub state_list: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReqVoteGameEnd {
    #[prost(bool, tag = "1")]
    pub yes: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResGameEndVote {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(uint32, tag = "2")]
    pub vote_cd_end_time: u32,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReqAuthObserve {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResStartObserve {
    #[prost(message, optional, tag = "1")]
    pub head: ::core::option::Option<GameLiveHead>,
    #[prost(message, optional, tag = "2")]
    pub passed: ::core::option::Option<GameLiveSegment>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyNewGame {
    #[prost(string, tag = "1")]
    pub game_uuid: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub player_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyPlayerLoadGameReady {
    #[prost(uint32, repeated, tag = "1")]
    pub ready_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyGameBroadcast {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyGameEndResult {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<GameEndResult>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyGameTerminate {
    #[prost(string, tag = "1")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyPlayerConnectionState {
    #[prost(uint32, tag = "1")]
    pub seat: u32,
    #[prost(enumeration = "GamePlayerState", tag = "2")]
    pub state: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyAccountLevelChange {
    #[prost(message, optional, tag = "1")]
    pub origin: ::core::option::Option<AccountLevel>,
    #[prost(message, optional, tag = "2")]
    pub r#final: ::core::option::Option<AccountLevel>,
    #[prost(uint32, tag = "3")]
    pub r#type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyGameFinishReward {
    #[prost(uint32, tag = "1")]
    pub mode_id: u32,
    #[prost(message, optional, tag = "2")]
    pub level_change: ::core::option::Option<notify_game_finish_reward::LevelChange>,
    #[prost(message, optional, tag = "3")]
    pub match_chest: ::core::option::Option<notify_game_finish_reward::MatchChest>,
    #[prost(message, optional, tag = "4")]
    pub main_character: ::core::option::Option<notify_game_finish_reward::MainCharacter>,
    #[prost(message, optional, tag = "5")]
    pub character_gift: ::core::option::Option<notify_game_finish_reward::CharacterGift>,
}
/// Nested message and enum types in `NotifyGameFinishReward`.
pub mod notify_game_finish_reward {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LevelChange {
        #[prost(message, optional, tag = "1")]
        pub origin: ::core::option::Option<super::AccountLevel>,
        #[prost(message, optional, tag = "2")]
        pub r#final: ::core::option::Option<super::AccountLevel>,
        #[prost(uint32, tag = "3")]
        pub r#type: u32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MatchChest {
        #[prost(uint32, tag = "1")]
        pub chest_id: u32,
        #[prost(uint32, tag = "2")]
        pub origin: u32,
        #[prost(uint32, tag = "3")]
        pub r#final: u32,
        #[prost(bool, tag = "4")]
        pub is_graded: bool,
        #[prost(message, repeated, tag = "5")]
        pub rewards: ::prost::alloc::vec::Vec<super::RewardSlot>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MainCharacter {
        #[prost(uint32, tag = "1")]
        pub level: u32,
        #[prost(uint32, tag = "2")]
        pub exp: u32,
        #[prost(uint32, tag = "3")]
        pub add: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct CharacterGift {
        #[prost(uint32, tag = "1")]
        pub origin: u32,
        #[prost(uint32, tag = "2")]
        pub r#final: u32,
        #[prost(uint32, tag = "3")]
        pub add: u32,
        #[prost(bool, tag = "4")]
        pub is_graded: bool,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityReward {
    #[prost(message, repeated, tag = "1")]
    pub activity_reward: ::prost::alloc::vec::Vec<notify_activity_reward::ActivityReward>,
}
/// Nested message and enum types in `NotifyActivityReward`.
pub mod notify_activity_reward {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ActivityReward {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(message, repeated, tag = "2")]
        pub rewards: ::prost::alloc::vec::Vec<super::RewardSlot>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyActivityPoint {
    #[prost(message, repeated, tag = "1")]
    pub activity_points: ::prost::alloc::vec::Vec<notify_activity_point::ActivityPoint>,
}
/// Nested message and enum types in `NotifyActivityPoint`.
pub mod notify_activity_point {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ActivityPoint {
        #[prost(uint32, tag = "1")]
        pub activity_id: u32,
        #[prost(uint32, tag = "2")]
        pub point: u32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyLeaderboardPoint {
    #[prost(message, repeated, tag = "1")]
    pub leaderboard_points: ::prost::alloc::vec::Vec<notify_leaderboard_point::LeaderboardPoint>,
}
/// Nested message and enum types in `NotifyLeaderboardPoint`.
pub mod notify_leaderboard_point {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct LeaderboardPoint {
        #[prost(uint32, tag = "1")]
        pub leaderboard_id: u32,
        #[prost(uint32, tag = "2")]
        pub point: u32,
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotifyGamePause {
    #[prost(bool, tag = "1")]
    pub paused: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyEndGameVote {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<notify_end_game_vote::VoteResult>,
    #[prost(uint32, tag = "2")]
    pub start_time: u32,
    #[prost(uint32, tag = "3")]
    pub duration_time: u32,
}
/// Nested message and enum types in `NotifyEndGameVote`.
pub mod notify_end_game_vote {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct VoteResult {
        #[prost(uint32, tag = "1")]
        pub account_id: u32,
        #[prost(bool, tag = "2")]
        pub yes: bool,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotifyObserveData {
    #[prost(message, optional, tag = "1")]
    pub unit: ::core::option::Option<GameLiveUnit>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GamePlayerState {
    Null = 0,
    Auth = 1,
    Syncing = 2,
    Ready = 3,
}
impl GamePlayerState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GamePlayerState::Null => "NULL",
            GamePlayerState::Auth => "AUTH",
            GamePlayerState::Syncing => "SYNCING",
            GamePlayerState::Ready => "READY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NULL" => Some(Self::Null),
            "AUTH" => Some(Self::Auth),
            "SYNCING" => Some(Self::Syncing),
            "READY" => Some(Self::Ready),
            _ => None,
        }
    }
}
